Doubly-linked lists can be useful in situations where you need to traverse a list in both directions. Some possible real-life uses of doubly-linked lists include:

1. Browser history: A browser's back and forward buttons can be implemented using a doubly-linked list. Each webpage visited is added to the list, and the back and forward buttons allow the user to traverse the list in both directions.

2. Text editors: A text editor can use a doubly-linked list to keep track of the text in a document. Each line of text can be stored in a node, and the nodes can be linked together to form a list. This allows the editor to easily insert, delete, and move lines of text.

3. Undo/redo functionality: Many applications have an undo/redo feature that allows the user to undo or redo their actions. A doubly-linked list can be used to implement this functionality, with each action being stored in a node and the nodes being linked together.

Using a list for a music player's next and previous buttons can work, but a linked list has some benefits. One benefit is that it allows for constant time insertion and deletion of elements, which can be useful if the playlist is frequently updated. Another benefit is that it can save memory, as a linked list only needs to store the current song and pointers to the previous and next songs, whereas a list stores the entire playlist. Additionally, a linked list can be easily modified to implement shuffle functionality, whereas a list would require shuffling the entire playlist.