The correct way to separate callbacks and layouts from the `app.py` in a single page app is to use a factory pattern. 

In this pattern, the `app` instance is created in a separate module, usually named `server.py`, and a function is defined to create the layout of the application, usually named `layout()`. 

Then, in each view module, the `layout()` function is imported and used to create the layout of the view. The callbacks of the view are defined in the same module and use the `app` instance created in `server.py`.

Here is an example of how to implement this pattern in the MWE:

### File structure

```
.
├── my_dash_app
│   ├── server.py
│   └── views
│       ├── first_view.py
│       └── __init__.py
└── setup.py
```

### server.py

```
import dash

app = dash.Dash(__name__)
server = app.server
```

### first_view.py

```
from dash.dependencies import Input, Output

import dash_core_components as dcc
import dash_html_components as html

from my_dash_app.server import app
from my_dash_app.server import server

def layout():
    return html.Div([
        dcc.Input(id='my-id', value='initial value', type='text'),
        html.Div(id='my-div')
    ])

@server.route('/')
def index():
    return app.index()

@app.callback(Output(component_id='my-div', component_property='children'),
              [Input(component_id='my-id', component_property='value')])
def update_output_div(input_value):
    return 'You\'ve entered "{}"'.format(input_value)
```

### app.py

```
from my_dash_app.server import app
from my_dash_app.views.first_view import layout

app.layout = layout()

if __name__ == '__main__':
    app.run_server(debug=True)
```

In this implementation, the `server.py` module creates the `app` instance and the `server` instance, which is used to run the application. 

The `layout()` function is defined in each view module and used to create the layout of the view. The `app` instance is imported from `server.py` and used to define the callbacks of the view.

Finally, the `app.py` module imports the `app` instance from `server.py` and the `layout()` function from each view module to create the layout of the application.