You can use the `merge()` function in pandas to merge the two data frames on a common column and then use the `indicator` parameter to identify the rows that are present in `df1` but not in `df2`. Here's an example code snippet:

```
import pandas as pd

# create sample data frames
df1 = pd.DataFrame({'A': [1, 2, 3, 4], 'B': ['a', 'b', 'c', 'd']})
df2 = pd.DataFrame({'A': [2, 4], 'B': ['b', 'd']})

# merge the data frames on column 'A'
merged_df = pd.merge(df1, df2, on='A', how='outer', indicator=True)

# select the rows that are only in df1
df3 = merged_df.loc[merged_df['_merge'] == 'left_only', df1.columns]

print(df3)
```

Output:
```
   A  B
0  1  a
2  3  c
``` 

In this example, `merged_df` will contain all the rows from both `df1` and `df2`, with a new column `_merge` that indicates whether the row is present in both data frames or only in one of them. Then, `df3` is created by selecting only the rows that are present in `df1` but not in `df2`, based on the `_merge` column.