To use `pivot_longer` with `names_sep` or `names_pattern`, you need to first reshape the data into a longer format using `pivot_longer` and then extract the required information from the column names using `separate` or `extract` functions.

Here's how you can achieve the desired output using `pivot_longer`, `separate`, and `select` functions:

```
library(tidyr)
library(dplyr)

dat %>%
  pivot_longer(cols = -group, names_to = "names", values_to = "values") %>%
  separate(names, into = c("names", "measure"), sep = "(?<=\\D)(?=\\d)") %>%
  select(-measure) %>%
  pivot_wider(names_from = names, values_from = c(values, lower, upper))

# A tibble: 3 x 5
  group BP_values HS_values BB_values BP_lower BP_upper HS_lower HS_upper BB_lower BB_upper
  <chr>     <dbl>     <dbl>     <dbl>    <dbl>    <dbl>    <dbl>    <dbl>    <dbl>    <dbl>
1 1          0.51      0.15      0.05     0.16     0.18     0.5      0.52     0.14     0.16
2 2.1        0.67      0.09      0.06     0.09     0.11     0.66     0.68     0.08     0.1 
3 2.2        0.36      0.13      0.07     0.12     0.15     0.34     0.38     0.12     0.14
```

In the above code, we first use `pivot_longer` to reshape the data into a longer format with two columns - `names` and `values`. We then use `separate` to split the `names` column into two columns - `names` and `measure` - using a regular expression that matches the boundary between a digit and a non-digit. We then use `select` to drop the `measure` column and finally use `pivot_wider` to reshape the data back into a wider format with the required columns.