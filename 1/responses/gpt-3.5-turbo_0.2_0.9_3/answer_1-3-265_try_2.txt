Yes, you can encrypt the JSON file using a symmetric encryption algorithm like AES (Advanced Encryption Standard) and a secret key. Here's an example code snippet in Python that demonstrates how to encrypt and decrypt a JSON file using AES:

```python
import json
from Crypto.Cipher import AES

# Define the secret key and initialization vector (IV)
key = b'secret_key_12345'
iv = b'initialization_vector'

# Define the path to the JSON file
json_file_path = 'path/to/json/file.json'

# Read the JSON file
with open(json_file_path, 'r') as f:
    json_data = json.load(f)

# Convert the JSON data to a string
json_str = json.dumps(json_data)

# Pad the string to a multiple of 16 bytes (AES block size)
padded_str = json_str + (16 - len(json_str) % 16) * chr(16 - len(json_str) % 16)

# Create the AES cipher object
cipher = AES.new(key, AES.MODE_CBC, iv)

# Encrypt the padded string
encrypted_str = cipher.encrypt(padded_str.encode())

# Write the encrypted data to a file
with open('path/to/encrypted/file.bin', 'wb') as f:
    f.write(encrypted_str)

# Read the encrypted data from the file
with open('path/to/encrypted/file.bin', 'rb') as f:
    encrypted_str = f.read()

# Create the AES cipher object
cipher = AES.new(key, AES.MODE_CBC, iv)

# Decrypt the encrypted string
decrypted_str = cipher.decrypt(encrypted_str)

# Remove the padding from the decrypted string
unpadded_str = decrypted_str[:-decrypted_str[-1]].decode()

# Convert the decrypted string back to JSON data
json_data = json.loads(unpadded_str)
```

Note that you should keep the secret key and IV secure and not share them with anyone who should not have access to the encrypted data.