The reason why the access times are different is due to the way the `match` statement is implemented in Python. When you use the `match` statement, Python generates a decision tree to determine which case to execute. This decision tree is optimized for the most common cases, but it is not optimized for all cases equally.

In your example, the decision tree generated by Python is optimized for the most common cases, which are the cases for `0`, `1`, `2`, and `3`. These cases are located at the top of the decision tree, which means that they are executed faster than the other cases.

On the other hand, the cases for `4`, `5`, `6`, and `7` are located at the bottom of the decision tree, which means that they are executed slower than the other cases. This is because the decision tree needs to traverse all the other cases before reaching these cases.

In general, the `match` statement in Python is optimized for the most common cases, but it is not optimized for all cases equally. If you need to have equal access times for all cases, you can use a dictionary instead of the `match` statement.