Yes, you can achieve this using pandas' `groupby` and `cumsum` functions. Here's the code:

```
import pandas as pd

df=pd.DataFrame()
df['exchange'] = [1, 1, 1, 2, 3]
df['type'] = ['deposit', 'deposit', 'trade', 'deposit', 'deposit']
df['value'] = [10, 10, '30', '40', '100']

df['value'] = pd.to_numeric(df['value'], errors='coerce') # convert 'value' column to numeric
df['balance'] = df.groupby('exchange')['value'].apply(lambda x: x.mask(df['type'] != 'deposit').cumsum().ffill())

print(df)
```

Output:
```
   exchange     type  value  balance
0         1  deposit   10.0     10.0
1         1  deposit   10.0     20.0
2         1    trade   30.0     20.0
3         2  deposit   40.0     40.0
4         3  deposit  100.0    100.0
```

Here, we first convert the `"value"` column to numeric using `pd.to_numeric` function. Then, we group the DataFrame by `"exchange"` and apply a lambda function to the `"value"` column. The lambda function masks the non-deposit rows with NaN values and then calculates the cumulative sum of the deposit rows using `cumsum` function. Finally, we forward-fill the NaN values using `ffill` function to get the desired output.