The issue with using `if_else()` to return a function is that `if_else()` is designed to return a vector of the same length as the input condition. In your example, the condition `x == 2` is a scalar, so `if_else()` tries to return a vector of length 1. However, you are trying to return a function, which is not a valid output for a vector.

To achieve the desired behavior, you can use `if()` and `else()` instead of `if_else()`. Here's an example:

```
x <- 2
if (x == 2) {
  min
} else {
  max
}
#> function (..., na.rm = FALSE)  .Primitive("min")
```

This code uses the standard `if()` and `else()` statements to conditionally return either `min` or `max`. The output is a function, as desired.

Alternatively, you can use `if_else()` to return a vector of functions, like this:

```
x <- c(2, 3, 2, 3)
if_else(x == 2, min, max)
#> [1] "function (..., na.rm = FALSE)  .Primitive(\"min\")"
#> [2] "function (..., na.rm = FALSE)  .Primitive(\"max\")"
#> [3] "function (..., na.rm = FALSE)  .Primitive(\"min\")"
#> [4] "function (..., na.rm = FALSE)  .Primitive(\"max\")"
```

Here, `x` is a vector of length 4, so `if_else()` returns a vector of length 4, where each element is either `min` or `max`, depending on the corresponding element of `x`.