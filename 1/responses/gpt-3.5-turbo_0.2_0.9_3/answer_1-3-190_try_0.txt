Your idea of using Celery to run the MQTT client in a separate process and forward messages to Django Channels through websockets is a good approach. It is a common practice to use Celery for long-running tasks, and it can handle the MQTT client process without any issues.

Regarding the concern about the length of the process, Celery is designed to handle long-running tasks, and you can configure it to handle tasks that take longer to complete. You can also use Celery's concurrency options to control how many tasks run simultaneously, which can help manage resources.

Another option to integrate Django with MQTT is to use a third-party library like Django-MQTT. This library provides a Django interface for MQTT, allowing you to publish and subscribe to MQTT topics directly from Django views. However, it does not support MQTT over websockets, so you would need to use a separate MQTT client library to handle the websockets connection.

In summary, using Celery to run the MQTT client in a separate process and forward messages to Django Channels through websockets is a good approach. It provides a scalable and flexible solution for integrating Django with MQTT.