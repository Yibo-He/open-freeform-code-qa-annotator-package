You can use Django-filter to create a search form that searches over all fields of the Location model. Here's an example:

1. Install Django-filter:

```
pip install django-filter
```

2. Create a filter class for the Location model:

```
import django_filters

class LocationFilter(django_filters.FilterSet):
    search = django_filters.CharFilter(method='search_filter', label='Search')

    class Meta:
        model = Location
        fields = ['search']

    def search_filter(self, queryset, name, value):
        return queryset.filter(
            Q(loc__icontains=value) |
            Q(loc_mansioned__icontains=value) |
            Q(loc_country__icontains=value) |
            Q(loc_modern__icontains=value)
        )
```

3. In your view, create an instance of the filter class and pass it to the template context:

```
from django.shortcuts import render
from .models import Location
from .filters import LocationFilter

def location_list(request):
    queryset = Location.objects.all()
    filter = LocationFilter(request.GET, queryset=queryset)
    return render(request, 'location_list.html', {'filter': filter})
```

4. In your template, render the search form:

```
<form method="get">
    {{ filter.form.as_p }}
    <button type="submit">Search</button>
</form>

{% for location in filter.qs %}
    {{ location.loc }} - {{ location.loc_mansioned }} - {{ location.loc_country }} - {{ location.loc_modern }}
{% endfor %}
```

This will create a search form with one input field that searches over all fields of the Location model.