You can use the `merge()` function in pandas to merge the two data frames on a common column and then use the `indicator` parameter to identify the rows that are present in `df1` but not in `df2`. Here's an example code:

```python
import pandas as pd

# create sample data frames
df1 = pd.DataFrame({'A': [1, 2, 3, 4], 'B': ['a', 'b', 'c', 'd']})
df2 = pd.DataFrame({'A': [2, 4], 'B': ['b', 'd']})

# merge the data frames on column 'A'
merged = pd.merge(df1, df2, on='A', how='outer', indicator=True)

# select rows that are only in df1
df3 = merged.loc[merged['_merge'] == 'left_only', df1.columns]

print(df3)
```

This will output:

```
   A  B
0  1  a
2  3  c
```

Here, `merged` is the merged data frame with an additional `_merge` column that indicates whether a row is present in both data frames (`both`), only in `df1` (`left_only`), or only in `df2` (`right_only`). We then select the rows that are only in `df1` by filtering on `_merge == 'left_only'` and selecting only the columns from `df1`. The resulting data frame `df3` has all the rows/columns in `df1` that are not in `df2`.