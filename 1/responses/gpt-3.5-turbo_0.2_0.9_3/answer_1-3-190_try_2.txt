Your idea of using Celery to run an MQTT client in a separate process and forward messages to Django Channels through websockets is a good approach. Celery is designed to handle long-running tasks, so it should be able to handle the MQTT client process without any issues.

Another option to directly integrate Django with MQTT is to use the Django-MQTT package. This package provides a simple way to connect to an MQTT broker and subscribe to topics. It also includes a Django model to store MQTT messages in the database.

However, Django-MQTT does not provide direct integration with Django Channels. You would need to write some additional code to forward MQTT messages to Django Channels.

Overall, using Celery to run an MQTT client in a separate process is a good approach for integrating Django with MQTT. It provides a clean separation of concerns and allows you to easily communicate with the MQTT client process from Django.