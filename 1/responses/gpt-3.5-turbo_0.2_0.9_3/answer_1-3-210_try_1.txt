The reason why the access times are different is due to the way the `match`/`case` statement is implemented in Python. 

When you use `match`/`case`, Python creates a decision tree to determine which case to execute. The decision tree is constructed based on the order of the cases in the code. The first case is evaluated first, then the second case, and so on. 

In your example, the first case is `'0'`, which means that if the input is `'0'`, it will be executed in the fastest time possible. However, if the input is `'7'`, Python has to evaluate all the previous cases before it can reach the last case, which is the default case. This is why the execution time for `'7'` is the slowest.

To optimize the execution time, you can reorder the cases in the code so that the most common cases are evaluated first. For example, if you expect `'0'`, `'1'`, and `'2'` to be the most common inputs, you can reorder the cases like this:

```
def match_case(decimal):
    match decimal:
      case '0':
        return "000"
      case '1':
        return "001"
      case '2':
        return "010"
      case '3':
        return "011"
      case '4':
        return "100"
      case '5':
        return "101"
      case '6':
        return "110"
      case '7':
        return "111"
      case _:
        return "NA"
```

With this order, the execution time for `'0'`, `'1'`, and `'2'` will be faster than before. However, the execution time for `'3'`, `'4'`, `'5'`, `'6'`, and `'7'` will still be slower than the first three cases. 

In summary, the execution time for `match`/`case` depends on the order of the cases in the code. You can optimize the execution time by reordering the cases based on the expected frequency of the inputs.