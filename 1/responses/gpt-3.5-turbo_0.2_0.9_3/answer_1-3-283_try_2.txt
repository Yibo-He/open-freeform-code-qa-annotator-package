Yes, you can speed up the creation of the matrix using multiprocessing. One way to do this is to split the matrix creation into multiple processes, where each process creates a subset of the rows of the matrix. Here's an example implementation using the `multiprocessing` module:

```
import numpy as np
import multiprocessing

def createMatrix(n):
    matrix = np.zeros((n, n))

    def createRow(i):
        row = []
        for j in range(1, n+1):
            value = 1/(i+j-1)
            row.append(value)
        return row

    with multiprocessing.Pool() as pool:
        rows = pool.map(createRow, range(1, n+1))

    for i, row in enumerate(rows):
        matrix[i] = row

    return matrix
```

In this implementation, the `createRow` function creates a single row of the matrix, and the `Pool.map` method is used to create all the rows in parallel. The resulting rows are then combined into the final matrix.

Note that the `multiprocessing` module can be sensitive to the size of the data being passed between processes, so you may need to experiment with different chunk sizes to find the optimal performance.