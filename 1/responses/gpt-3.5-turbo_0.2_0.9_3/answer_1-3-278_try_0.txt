Yes, you can achieve this by providing a custom function to the `asdict` function's `dict_factory` parameter. Here's an example of how you can modify your code to achieve your goal:

```
from dataclasses import dataclass, asdict
from enum import Enum


@dataclass
class Foobar:
    name: str
    template: "FoobarEnum"


class FoobarEnum(Enum):
    FIRST = "foobar"
    SECOND = "baz"


def enum_to_str(value):
    if isinstance(value, Enum):
        return value.value
    return value


foobar = Foobar(name="John", template=FoobarEnum.FIRST)

print(asdict(foobar, dict_factory=lambda d: {k: enum_to_str(v) for k, v in d.items()}))
```

In this modified code, we define a new function `enum_to_str` that takes a value and checks if it's an instance of an Enum. If it is, it returns the value of the Enum object, otherwise it returns the original value. We then pass this function as the `dict_factory` parameter to the `asdict` function. This function is called for each item in the dictionary generated by `asdict`, and it converts any Enum objects to their string values.