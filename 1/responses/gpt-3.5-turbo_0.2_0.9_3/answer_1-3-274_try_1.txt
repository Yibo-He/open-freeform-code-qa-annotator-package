Doubly-linked lists can be useful in situations where you need to traverse a list in both forward and backward directions. Some possible real-life uses of doubly-linked lists include:

1. Browser history: A browser history can be implemented using a doubly-linked list where each node represents a webpage and has pointers to the previous and next webpages visited.

2. Text editors: Text editors can use doubly-linked lists to represent the text buffer. Each node in the list represents a line of text and has pointers to the previous and next lines.

3. Undo/Redo functionality: A doubly-linked list can be used to implement undo/redo functionality in applications. Each node in the list represents a state of the application, and the pointers allow for traversing the list in both directions.

Using a list for a music player's next and previous buttons can be simpler, but using a linked list can have some benefits. For example:

1. Insertion and deletion: Linked lists allow for efficient insertion and deletion of elements in the middle of the list, whereas with a list, these operations can be more expensive.

2. Memory allocation: Linked lists can be more memory-efficient than lists, especially when dealing with large datasets, as they only allocate memory for the elements that are needed.

3. Traversal: With a linked list, you can traverse the list in both forward and backward directions, which can be useful in certain situations.