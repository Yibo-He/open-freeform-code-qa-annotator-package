Yes, you can speed up the creation of the matrix using multiprocessing. One way to do this is to split the matrix creation into multiple processes, each creating a portion of the matrix. Here's an example implementation using the `multiprocessing` module:

```
import numpy as np
import multiprocessing

def createMatrixChunk(start, end, n, queue):
    chunk = []
    for j in range(start, end):
        row = []
        for i in range(1, n+1):
            value = 1/(i+j-1)
            row.append(value)
        chunk.append(row)
    queue.put(chunk)

def createMatrix(n, num_processes):
    matrix = np.zeros((n, n))
    chunk_size = n // num_processes
    queue = multiprocessing.Queue()
    processes = []
    for i in range(num_processes):
        start = i * chunk_size
        end = start + chunk_size
        if i == num_processes - 1:
            end = n
        p = multiprocessing.Process(target=createMatrixChunk, args=(start, end, n, queue))
        p.start()
        processes.append(p)
    for p in processes:
        p.join()
    for i in range(num_processes):
        start = i * chunk_size
        end = start + chunk_size
        if i == num_processes - 1:
            end = n
        chunk = queue.get()
        matrix[start:end, :] = chunk
    return matrix
```

This implementation splits the matrix creation into `num_processes` processes, each creating a portion of the matrix. The `createMatrixChunk` function creates a chunk of the matrix, starting from row `start` and ending at row `end-1`, and puts it into a queue. The main process then waits for all the processes to finish, and retrieves the chunks from the queue and combines them into the final matrix.

To use this implementation, simply call `createMatrix(n, num_processes)` with the desired matrix size `n` and the number of processes to use `num_processes`. For example:

```
matrix = createMatrix(1000, 4)
```

This will create a 1000x1000 matrix using 4 processes. You can adjust the number of processes to find the optimal balance between speed and resource usage.