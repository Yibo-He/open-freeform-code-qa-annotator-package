One way to brighten the dark areas of an image in Python is to use the OpenCV library. Here is an example code snippet that you can use:

```python
import cv2

# Load the image
img = cv2.imread('input_image.jpg')

# Convert the image to grayscale
gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

# Apply adaptive thresholding to brighten the dark areas
thresh = cv2.adaptiveThreshold(gray, 255, cv2.ADAPTIVE_THRESH_MEAN_C, cv2.THRESH_BINARY, 11, 2)

# Merge the thresholded image with the original image
result = cv2.merge((cv2.bitwise_and(img[:,:,0], thresh), cv2.bitwise_and(img[:,:,1], thresh), cv2.bitwise_and(img[:,:,2], thresh)))

# Save the result
cv2.imwrite('output_image.jpg', result)
```

In this code, we first load the input image using the `cv2.imread` function. Then, we convert the image to grayscale using the `cv2.cvtColor` function. Next, we apply adaptive thresholding to the grayscale image using the `cv2.adaptiveThreshold` function. This function calculates a threshold value for each pixel based on the mean of the surrounding pixels, and then applies a binary threshold to the pixel based on this value. This has the effect of brightening the dark areas of the image.

Finally, we merge the thresholded image with the original image using the `cv2.merge` function, and save the result using the `cv2.imwrite` function.

You can adjust the parameters of the `cv2.adaptiveThreshold` function to achieve the desired level of brightness in the dark areas of your image.