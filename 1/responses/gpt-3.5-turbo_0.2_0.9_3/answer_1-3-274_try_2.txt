Doubly-linked lists can be useful in situations where you need to traverse a list in both forward and backward directions. Some possible real-life uses of doubly-linked lists are:

1. Web browser history: A web browser can use a doubly-linked list to keep track of the pages visited by the user. The user can navigate back and forth between the pages using the back and forward buttons.

2. Undo/Redo functionality in text editors: A text editor can use a doubly-linked list to keep track of the changes made to a document. The user can undo or redo the changes by traversing the list in both directions.

3. Cache management: A cache can use a doubly-linked list to keep track of the most recently used items. The least recently used items can be removed from the cache when it reaches its maximum size.

Using a list for a music player's next and previous buttons can be simpler, but using a linked list can have some benefits. For example:

1. Insertion and deletion: If you want to add or remove a song from the playlist, using a linked list can be more efficient than using a list. In a linked list, you can insert or delete a node in constant time, whereas in a list, you may need to shift the elements to maintain the order.

2. Memory management: If the playlist is very large, using a linked list can be more memory-efficient than using a list. In a linked list, each node only needs to store a reference to the next and previous nodes, whereas in a list, each element needs to store the value and the index.

3. Traversal: If you need to traverse the playlist in both directions, using a linked list can be more efficient than using a list. In a linked list, you can traverse the list in constant time in both directions, whereas in a list, you may need to use a counter and index the elements.