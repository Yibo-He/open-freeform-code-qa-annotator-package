There are a few issues with your recurrence relation and code:

1. In your recurrence relation, you are adding `k` twice for the case where the first two elements are the same. It should only be added once.

2. In your code, you are using `n` instead of `i` in the loop to calculate `dp[i]`. This means that you are not using the correct values for `dp[n-2]` and `dp[n-1]`.

3. Your base case `dp[1] = k` is incorrect. It should be `dp[1] = k * k` since there are `k` choices for the first element and `k` choices for the second element.

Here is the corrected code:

```
def count_num_ways(n, k):
    dp = [0 for i in range(n+1)]

    dp[0] = 1
    dp[1] = k * k

    for i in range(2, n+1):
        dp[i] = k * dp[i-1] + (k-1) * dp[i-2]

    print(dp[n])
```

The corrected recurrence relation is `dp[i] = k * dp[i-1] + (k-1) * dp[i-2]`. This is because there are `k` choices for the first element, and for the second element, there are `k` choices if it is different from the first element, and `k-1` choices if it is the same as the first element. Therefore, the total number of ways to form a sequence of length `i` is `k * dp[i-1] + (k-1) * dp[i-2]`.

I hope this helps!