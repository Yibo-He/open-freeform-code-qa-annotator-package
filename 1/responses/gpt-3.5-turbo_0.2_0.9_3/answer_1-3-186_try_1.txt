The correct way to separate callbacks and layouts from the `app.py` in a single page app is to use a factory pattern. 

In this pattern, you create a function that returns the layout of the view and another function that registers the callbacks for that view. These functions are then imported into the `app.py` and called to create the layout and register the callbacks.

Here is an updated version of the MWE using the factory pattern:

### File structure

```
.
├── my_dash_app
│   ├── app.py
│   └── views
│       ├── first_view.py
│       └── __init__.py
└── setup.py
```

### setup.py

```
import setuptools

setuptools.setup(
    name='dash-minimal-realworld',
    version='1.0.0',
    install_requires=['dash>=1.12.0'],
    packages=setuptools.find_packages(),
)
```

### app.py

```
import dash

from my_dash_app.views.first_view import create_layout, register_callbacks

app = dash.Dash(__name__)
app.layout = create_layout()
register_callbacks(app)


if __name__ == '__main__':
    app.run_server(debug=True)
```

### first_view.py

```
from dash.dependencies import Input, Output

import dash_core_components as dcc
import dash_html_components as html


def create_layout():
    return html.Div([
        dcc.Input(id='my-id', value='initial value', type='text'),
        html.Div(id='my-div')
    ])


def register_callbacks(app):
    @app.callback(Output(component_id='my-div', component_property='children'),
                  [Input(component_id='my-id', component_property='value')])
    def update_output_div(input_value):
        return 'You\'ve entered "{}"'.format(input_value)
```

In this example, the `create_layout` function returns the layout for the view, and the `register_callbacks` function registers the callbacks for that view. These functions are then imported into the `app.py` and called to create the layout and register the callbacks.

Note that the `app` instance is passed as an argument to the `register_callbacks` function, allowing the callbacks to be registered with the correct `app` instance.