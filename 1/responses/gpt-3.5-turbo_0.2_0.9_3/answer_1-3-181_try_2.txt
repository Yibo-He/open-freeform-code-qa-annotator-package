You can use NumPy's `max` function along with indexing to get the desired output. Here's the code:

```python
import numpy as np

arr = np.array([[[4, 1, 5, 2, 5, 5, 7, 8, 9, 7],
                 [7, 4, 2, 4, 7, 8, 4, 1, 3, 5],
                 [6, 1, 2, 1, 1, 1, 2, 3, 7, 6],
                 [5, 5, 5, 0, 5, 4, 3, 8, 7, 1],
                 [2, 8, 6, 7, 4, 7, 5, 5, 5, 1]],

                [[9, 9, 5, 8, 0, 7, 3, 9, 8, 1],
                 [9, 1, 9, 5, 7, 4, 5, 4, 7, 0],
                 [1, 0, 4, 8, 7, 3, 4, 3, 8, 8],
                 [8, 1, 3, 1, 7, 0, 9, 9, 3, 8],
                 [4, 0, 2, 3, 8, 2, 0, 1, 2, 4]],

                [[1, 6, 2, 4, 4, 0, 2, 3, 0, 3],
                 [9, 6, 8, 6, 6, 5, 6, 9, 4, 1],
                 [0, 4, 0, 2, 9, 1, 1, 2, 4, 6],
                 [6, 1, 9, 9, 7, 8, 9, 7, 6, 8],
                 [9, 3, 9, 0, 7, 0, 0, 0, 7, 0]]])

result = arr[:, :, 2].max(axis=1).reshape(-1, 1)

print(result)
```

Output:
```
array([[6],
       [9],
       [9]])
```

Here, we first extract the third column of each 2D array in the 3D array using indexing (`arr[:, :, 2]`). Then, we use the `max` function along the second axis (i.e., axis=1) to get the maximum value of each row. Finally, we reshape the resulting 1D array into a 2D array with one column and as many rows as there are 2D arrays in the original 3D array.