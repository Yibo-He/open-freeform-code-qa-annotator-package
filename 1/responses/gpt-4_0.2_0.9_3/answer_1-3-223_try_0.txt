You can use the `pip show` command to get the installed version of a package, and `pip search` to get the latest version available. Then, you can compare these two versions to check if the package is up-to-date. 

Here is a Python script that does this:

```python
import subprocess
import re

def is_package_up_to_date(package_name):
    # Get installed version
    installed_package = subprocess.getoutput('pip show ' + package_name)
    installed_version = re.search('Version: (.*)', installed_package)
    if installed_version is None:
        return False
    installed_version = installed_version.group(1)

    # Get latest version
    latest_package = subprocess.getoutput('pip search ' + package_name)
    latest_version = re.search(package_name + ' \((.*)\)', latest_package)
    if latest_version is None:
        return False
    latest_version = latest_version.group(1)

    # Compare versions
    return installed_version == latest_version

print(is_package_up_to_date('gekko'))
```

This script will return `True` if the package is up-to-date, and `False` otherwise. 

Please note that this script assumes that `pip` is in your system's PATH. If it's not, you might need to replace `'pip show '` and `'pip search '` with the full path to your `pip` executable.

Also, please note that the `pip search` command is currently disabled due to PyPI's XMLRPC API removal. You might need to use an alternative method to get the latest version of a package. For example, you can use the `requests` library to send a GET request to `https://pypi.org/pypi/<package_name>/json` and parse the JSON response to get the latest version.