You can use the `find_contours` function from the `skimage.measure` module to find the boundary of the object in the binary image. This function returns a list of contours found in the image, where each contour is an array of x, y coordinates.

Here is a simple example:

```python
import numpy as np
import matplotlib.pyplot as plt
from skimage.measure import find_contours

# Assuming 'mask' is your binary image
contours = find_contours(mask, 0.5)

# 'find_contours' returns a list of contours, so you need to get the first one
# Also, the y, x coordinates are swapped, so you need to swap them back
coords = np.fliplr(contours[0])

# Now you can plot the boundary
plt.plot(coords[:, 0], coords[:, 1])
plt.show()
```

This will give you the x, y coordinates of the boundary pixels. Note that the `0.5` in the `find_contours` function is the level at which to find contours in the image. Since your image is binary, you can use `0.5` to find the boundary between the white and black regions.

Also, please note that the `find_contours` function returns the coordinates in (row, column) format (which corresponds to (y, x) in image coordinates), so you need to flip the coordinates to get them in the usual (x, y) format.