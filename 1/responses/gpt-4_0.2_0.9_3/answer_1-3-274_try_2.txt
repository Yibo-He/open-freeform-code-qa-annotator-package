Linked lists, especially doubly-linked lists, are very useful in certain situations where we need more flexibility in data handling. Here are some real-life uses:

1. **Browser History**: The back and forward buttons on a web browser can be implemented using a doubly-linked list. Each node in the list can represent a web page. The 'next' pointer of a node points to the page visited after the current one, and the 'previous' pointer points to the page visited before the current one.

2. **Music Player**: As you mentioned, a music player can use a doubly-linked list to manage songs in the playlist. Each node represents a song. The 'next' pointer can be used to go to the next song, and the 'previous' pointer can be used to go to the previous song. This is more efficient than using an array or list and managing a counter, especially when the playlist is large or changes frequently.

3. **Image Viewer or PDF Reader**: In an image viewer or PDF reader, you can go to next or previous image or page. This can be implemented using a doubly-linked list.

4. **Undo-Redo functionality**: Many applications like text editors or graphic design software have undo and redo functionality. This can be implemented using a doubly-linked list where each node represents a state of your work.

As for your question about whether it would be simpler to use a list, it depends on the specific use case. Lists (or arrays) are simpler and more straightforward to use, but they have limitations. For example, inserting or deleting an element in the middle of a list can be expensive because it requires shifting elements. In contrast, these operations can be done more efficiently with a linked list.

The main benefits of using a linked list are:

1. **Dynamic Size**: Unlike arrays, linked lists do not have a fixed size. This makes them very useful when it's not known in advance how many elements will be in the list.

2. **Efficient Insertions/Deletions**: Inserting or deleting an element in a linked list is a quick operation. It doesn't require shifting elements like in an array.

3. **Can be used for advanced data structures**: Linked lists are used as the underlying data structure for more advanced data structures like hash tables, adjacency lists for graphs, etc.

In the case of a music player, using a linked list allows for efficient addition and removal of songs, and easy navigation between songs. The 'next' and 'previous' pointers in a doubly-linked list make it easy to implement the 'next' and 'previous' buttons.