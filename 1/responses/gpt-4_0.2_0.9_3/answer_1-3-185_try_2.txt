The task you are trying to accomplish is a bit tricky because the text you want to keep and the text you want to remove are quite similar in color and size. However, you can try to improve the results by applying some image processing techniques such as blurring, thresholding, and morphological operations.

Here's an example of how you might approach this:

```python
import cv2
import numpy as np
import pytesseract

def clean_image(img_path):
    # Load the image
    img = cv2.imread(img_path)

    # Convert the image to grayscale
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

    # Apply a slight Gaussian blur to the image
    blur = cv2.GaussianBlur(gray, (3, 3), 0)

    # Threshold the image to isolate the characters
    _, thresh = cv2.threshold(blur, 0, 255, cv2.THRESH_BINARY_INV + cv2.THRESH_OTSU)

    # Perform a series of erosions and dilations to remove any small blobs of noise
    kernel = np.ones((3, 3), np.uint8)
    opening = cv2.morphologyEx(thresh, cv2.MORPH_OPEN, kernel, iterations=2)

    # Find sure background area
    sure_bg = cv2.dilate(opening, kernel, iterations=3)

    # Finding sure foreground area
    dist_transform = cv2.distanceTransform(opening, cv2.DIST_L2, 5)
    _, sure_fg = cv2.threshold(dist_transform, 0.7 * dist_transform.max(), 255, 0)

    # Finding unknown region
    sure_fg = np.uint8(sure_fg)
    unknown = cv2.subtract(sure_bg, sure_fg)

    # Marker labelling
    _, markers = cv2.connectedComponents(sure_fg)

    # Add one to all labels so that sure background is not 0, but 1
    markers = markers + 1

    # Now, mark the region of unknown with zero
    markers[unknown == 255] = 0

    markers = cv2.watershed(img, markers)
    img[markers == -1] = [255, 0, 0]

    # Convert image to binary
    _, binary = cv2.threshold(img, 150, 255, cv2.THRESH_BINARY_INV)

    return binary

def get_text(img_path):
    img = clean_image(img_path)
    text = pytesseract.image_to_string(img)
    return text
```

This script first applies a Gaussian blur to the image to reduce noise. Then, it uses Otsu's binarization to threshold the image. After that, it performs a series of erosions and dilations to remove any small blobs of noise. Finally, it uses the watershed algorithm to separate overlapping objects.

Please note that the parameters used in this script might need to be adjusted depending on the specific characteristics of your images. Also, keep in mind that Tesseract might not be able to perfectly recognize the characters in the images due to the complexity and variability of the CAPTCHA.