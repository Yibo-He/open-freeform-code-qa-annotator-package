You can use the `idxmax` function to get the index of the maximum date for each group. Then, you can create a new column 'Latest' and set its value to 'Latest' for these indices.

Here is how you can do it:

```python
# Get the indices of the rows with the maximum date for each group
idx = df[df['Value'] == 1].groupby('ID')['Date'].idxmax()

# Create a new column 'Latest' and set its value to 'Latest' for these indices
df['Latest'] = ''
df.loc[idx, 'Latest'] = 'Latest'
```

This will give you the desired output.

EDIT: If you want to use 'ID 2' as a tiebreaker, you can sort the dataframe by 'Date' and 'ID 2' before getting the index of the maximum date. Here is how you can do it:

```python
# Sort the dataframe by 'Date' and 'ID 2'
df_sorted = df.sort_values(['Date', 'ID 2'])

# Get the indices of the rows with the maximum date for each group
idx = df_sorted[df_sorted['Value'] == 1].groupby('ID').last().index

# Create a new column 'Latest' and set its value to 'Latest' for these indices
df['Latest'] = ''
df.loc[idx, 'Latest'] = 'Latest'
```

This will give you the row with the maximum 'Date' and 'ID 2' for each group.