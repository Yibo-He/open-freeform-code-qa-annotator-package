`db_index=True` is used to create an index on a specific field in a database table. Indexes are used to speed up search queries by essentially cutting down the number of records/rows in a table that need to be examined. 

You should consider using `db_index=True` in the following scenarios:

1. **Fields that you query frequently**: If you have a field that you often use in your `filter()`, `exclude()`, or `order_by()` methods, it might be a good candidate for indexing. This could speed up these queries significantly.

2. **Foreign keys and fields used in JOIN operations**: Django automatically creates an index on `ForeignKey` and `OneToOneField` fields for efficient joins. If you're manually creating these joins, you might want to add an index.

3. **Fields with high cardinality**: Fields with a high number of unique values (high cardinality) are good candidates for indexing. This is because the database can more efficiently narrow down the results of a query if the field has many unique values.

However, indexing isn't always beneficial and can sometimes even degrade performance. Here are some things to keep in mind:

1. **Fields with low cardinality**: If a field has a low number of unique values (low cardinality), an index might not provide much benefit. For example, a boolean field has only two unique values, so an index might not speed up queries significantly.

2. **Fields that aren't often queried**: If a field isn't used frequently in queries, an index on that field might be unnecessary.

3. **Write-heavy applications**: Indexes can slow down write operations (like `INSERT`, `UPDATE`, `DELETE`), because the database needs to update the index every time a record is added, modified, or deleted. If your application writes to the database more often than it reads, the cost of maintaining the index might outweigh the benefits.

4. **Storage considerations**: Indexes take up space. If your database is already large, adding indexes will increase its size.

In terms of your question about indexing fields with repetitive data, it depends on the specific use case. If you frequently query on a field with repetitive data, an index could still be beneficial. However, the effectiveness of the index will depend on the distribution of the data and the specific queries you're running. It's always a good idea to test the performance of your queries with and without the index to see if it provides a benefit.