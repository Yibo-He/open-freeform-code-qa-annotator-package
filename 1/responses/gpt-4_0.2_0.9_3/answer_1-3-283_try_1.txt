Yes, you can use multiprocessing to speed up your matrix creation. Python's multiprocessing module allows you to create multiple processes, each with its own Python interpreter, which can run independently of each other. This can be especially useful for CPU-bound tasks like yours.

Here's an example of how you can modify your function to use multiprocessing:

```python
from multiprocessing import Pool
import numpy as np

def calculate_value(args):
    i, j = args
    return 1/(i+j-1)

def createMatrix(n):
    with Pool() as p:
        matrix = []
        for j in range(1,n+1):
            row = p.map(calculate_value, [(i, j) for i in range(1, n+1)])
            matrix.append(row)
        return np.array(matrix)
```

In this code, we're using a Pool of worker processes. For each row, we're using the map function to apply the calculate_value function to each element of the row in parallel. The calculate_value function takes a tuple of (i, j) as its argument, so we need to pass a list of tuples to the map function.

Please note that this code will create a new Pool of processes for each row, which can be inefficient if n is large. If that's the case, you might want to create the Pool outside the createMatrix function and pass it as an argument, so that the same Pool is used for all rows.

Also, keep in mind that multiprocessing has some overhead because it needs to create new processes and communicate data between them. Therefore, it might not always speed up your code, especially for small inputs or for tasks that are not CPU-bound. It's always a good idea to test your code with and without multiprocessing to see if it actually improves performance.