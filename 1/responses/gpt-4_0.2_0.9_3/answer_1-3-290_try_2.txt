To get the mean SHAP values, you can use the numpy library's mean function. Here's how you can do it:

```python
import numpy as np

mean_shap_values = np.mean(shap_values, axis=0)
```

This will give you the mean SHAP values for each feature across all the samples in your test set.

As for the class labels, the XGBoost model automatically converts the class labels to integers starting from 0. The order of the classes is the same as the order in which they appear in your y_train data. 

You can check the order of the classes using the classes_ attribute of the XGBoost model after fitting it:

```python
print(model.classes_)
```

This will print an array of the class labels in the order used by the model. So, if it prints ['a', 'b', 'c'], then in your SHAP summary plot, 0 corresponds to 'a', 1 corresponds to 'b', and 2 corresponds to 'c'.

If you want to use the original class labels in the SHAP summary plot, you can create a dictionary mapping the integer labels to the original labels and pass it to the class_names parameter:

```python
class_names_dict = {i: label for i, label in enumerate(model.classes_)}
shap.summary_plot(shap_values, X_test, class_names=class_names_dict)
```

This will use the original class labels in the SHAP summary plot.