Your idea of using Celery to run a separate process for the MQTT client is not necessarily a bad one, but as you mentioned, it's not the best practice to use Celery for long-running tasks. Celery is designed for short, asynchronous tasks and it's not ideal for tasks that need to maintain a persistent connection like an MQTT client.

However, there are other ways to integrate Django with MQTT:

1. **Use a separate service**: Instead of trying to run the MQTT client within Django or Celery, you could run it as a separate service. This service would handle all MQTT communication and could use Django's REST API or database to communicate with your Django app. This would allow you to keep the MQTT client running as long as you need without interfering with your Django app or Celery tasks.

2. **Use Django Channels**: Django Channels is designed to handle WebSocket communication, which is similar to MQTT. You could use Django Channels to handle MQTT messages, but you would need to implement the MQTT protocol yourself or find a library that can handle it.

3. **Use a MQTT to HTTP bridge**: Some MQTT brokers offer a HTTP bridge, which allows you to send and receive MQTT messages over HTTP. This would allow you to use Django's built-in HTTP capabilities to handle MQTT messages.

4. **Use a third-party service**: There are several third-party services that offer MQTT integration, such as CloudMQTT. These services handle all the MQTT communication for you and provide a HTTP API that you can use with Django.

In conclusion, while it's possible to use Celery for your MQTT client, it's probably not the best solution. A separate service or a third-party MQTT service would likely be a better fit.