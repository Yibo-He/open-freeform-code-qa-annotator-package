To create a single input field that can search over all fields of the Location model, you can use Django-filter's `MethodFilter`. Here's how you can do it:

First, install django-filter if you haven't done so:

```bash
pip install django-filter
```

Then, in your `filters.py` file, create a filter set for your model:

```python
import django_filters
from .models import Location

class LocationFilter(django_filters.FilterSet):
    search = django_filters.CharFilter(method='filter_search')

    class Meta:
        model = Location
        fields = ['search']

    def filter_search(self, queryset, name, value):
        return queryset.filter(
            Q(loc__icontains=value) |
            Q(loc_mansioned__icontains=value) |
            Q(loc_country__icontains=value) |
            Q(loc_modern__icontains=value)
        )
```

In this code, `filter_search` is a method that takes a queryset and a value, and returns a queryset that includes items where any of the fields contain the value. The `Q` objects allow for complex lookups in Django.

Then, in your view, you would use this filter set:

```python
from django.shortcuts import render
from .models import Location
from .filters import LocationFilter

def location_list(request):
    filter = LocationFilter(request.GET, queryset=Location.objects.all())
    return render(request, 'my_template.html', {'filter': filter})
```

And in your template, you would include the filter form:

```html
<form method="get">
    {{ filter.form }}
    <button type="submit">Search</button>
</form>

{% for location in filter.qs %}
    <!-- Display the location -->
{% endfor %}
```

This will create a single input field that searches over all fields of the Location model.