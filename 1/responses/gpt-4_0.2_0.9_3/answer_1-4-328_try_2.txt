You can use `pivot_longer` from the `tidyverse` package to reshape your data. The `names_pattern` argument allows you to specify a regular expression that will be used to separate the column names into multiple variables. In your case, you can use a regular expression to separate the column names into the variable name and the type of value (value, lower, upper).

Here is how you can do it:

```r
library(tidyverse)

dat_long <- dat %>%
  pivot_longer(
    cols = -group, 
    names_to = c(".value", "names"), 
    names_pattern = "(lower|upper)?(.*)"
  )

dat_long
```

In the `names_pattern`, `(lower|upper)?(.*)` is a regular expression where `(lower|upper)?` matches either "lower" or "upper" at the start of the column name, and `(.*)` matches the rest of the column name. The `?` makes the "lower" or "upper" optional, so it also matches column names that start directly with the variable name.

The `names_to = c(".value", "names")` argument tells `pivot_longer` to use the first part of the column name (matched by `(lower|upper)?`) as the name of the new value column, and the second part of the column name (matched by `(.*)`) as the name of the new variable column.

The `cols = -group` argument tells `pivot_longer` to reshape all columns except the "group" column.

The result is a long format data frame where each row represents one observation, with a separate row for each variable and group.