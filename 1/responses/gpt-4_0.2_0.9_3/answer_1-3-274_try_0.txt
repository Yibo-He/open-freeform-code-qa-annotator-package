Doubly-linked lists can be used in various real-life applications. Here are a few examples:

1. Browser History: The back and forward buttons on a web browser can be implemented using a doubly-linked list. Each site is a node in the list, with the 'next' pointer directing to the next site and the 'previous' pointer directing to the previous site.

2. Music Player: As you mentioned, a music player can use a doubly-linked list to manage songs in the playlist. The 'next' pointer can be used to go to the next song, and the 'previous' pointer can be used to go to the previous song.

3. Image Viewer: An image viewer can use a doubly-linked list to manage images. The 'next' pointer can be used to go to the next image, and the 'previous' pointer can be used to go to the previous image.

4. Navigation systems: In some complex navigation systems, doubly-linked lists can be used to go forward and backward on a certain route.

As for your question about whether it would be simpler to use a list, it depends on the specific use case. Lists (or arrays) and linked lists have different strengths and weaknesses.

The main advantage of linked lists over arrays is that the former can insert or delete nodes at any point in the list with constant time complexity (O(1)). In contrast, arrays require shifting elements when inserting or deleting, which has a linear time complexity (O(n)).

However, arrays have faster access times for individual elements (constant time complexity, O(1)), while linked lists require traversing from the head of the list to the required element (linear time complexity, O(n)).

In the case of a music player, if you frequently add or remove songs in the middle of the playlist, a linked list might be more efficient. But if you mostly play songs in order or only add/remove songs at the end of the playlist, an array could be simpler and more efficient.