Yes, you can encrypt your JSON file using a key and then decrypt it in your Python program using the same key. Here is a simple way to do it using the `pycryptodome` library. If you don't have this library, you can install it using pip:

```bash
pip install pycryptodome
```

Here is a simple example of how you can encrypt and decrypt your JSON file:

```python
from Crypto.Cipher import AES
from Crypto.Util.Padding import pad, unpad
from Crypto.Random import get_random_bytes
import json

# Encryption
def encrypt_json(key, json_file):
    data = json.dumps(json_file)
    cipher = AES.new(key, AES.MODE_CBC)
    iv = cipher.iv
    ct_bytes = cipher.encrypt(pad(data.encode(), AES.block_size))
    return iv + ct_bytes

# Decryption
def decrypt_json(key, ct):
    iv = ct[:16]
    ct = ct[16:]
    cipher = AES.new(key, AES.MODE_CBC, iv=iv)
    pt = unpad(cipher.decrypt(ct), AES.block_size)
    return json.loads(pt.decode())

# Usage
key = get_random_bytes(16)  # This should be the same key for encryption and decryption

# Suppose this is your JSON data
json_data = {"name": "John", "age": 30, "city": "New York"}

encrypted_data = encrypt_json(key, json_data)
print(encrypted_data)  # This will print encrypted data

decrypted_data = decrypt_json(key, encrypted_data)
print(decrypted_data)  # This will print decrypted data which is your original JSON data
```

In this example, `key` is the encryption and decryption key. You should keep this key secret and use the same key for encryption and decryption. The `encrypt_json` function encrypts your JSON data and the `decrypt_json` function decrypts it.

Please note that this is a simple example and may not be suitable for all situations. Depending on your specific needs, you may need to use a more secure way to store and handle the encryption key.