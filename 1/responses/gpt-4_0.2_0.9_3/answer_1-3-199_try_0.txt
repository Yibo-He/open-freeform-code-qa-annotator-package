The problem you're encountering is due to the fact that AWS Lambda runs your code in a read-only file system, with the exception of the /tmp directory. This is why you're seeing errors like "mkdir: cannot create directory ‘/.local’: Read-only file system".

The Chrome browser, when launched, tries to write to certain directories and files which are not writable in the AWS Lambda environment, hence the crash.

To solve this, you can use a custom build of Chrome that is specifically designed to run on AWS Lambda. This build is configured to write only to directories that are writable in the Lambda environment.

Here's how you can modify your Dockerfile to use this custom build of Chrome:

1. Remove the steps that download and install Chrome and Chromedriver.

2. Add these steps to download and install the custom build of Chrome and its corresponding Chromedriver:

```Dockerfile
# Download and install Chrome for AWS Lambda
RUN curl -SL https://github.com/adieuadieu/serverless-chrome/releases/download/v1.0.0-55/stable-headless-chromium-amazonlinux-2017-03.zip > headless-chromium.zip && \
    unzip headless-chromium.zip && \
    rm headless-chromium.zip && \
    mv headless-chromium /usr/local/bin/chrome

# Download and install Chromedriver that is compatible with the custom build of Chrome
RUN curl -SL https://chromedriver.storage.googleapis.com/2.37/chromedriver_linux64.zip > chromedriver.zip && \
    unzip chromedriver.zip && \
    rm chromedriver.zip && \
    mv chromedriver /usr/local/bin/chromedriver
```

3. Modify your Python code to use the custom build of Chrome:

```python
options = Options()
options.binary_location = '/usr/local/bin/chrome'
options.add_argument('--headless')
options.add_argument('--no-sandbox')
options.add_argument('--disable-gpu')
options.add_argument('--window-size=1280x1696')
options.add_argument('--user-data-dir=/tmp/user-data')
options.add_argument('--hide-scrollbars')
options.add_argument('--enable-logging')
options.add_argument('--log-level=0')
options.add_argument('--v=99')
options.add_argument('--single-process')
options.add_argument('--data-path=/tmp/data-path')
options.add_argument('--ignore-certificate-errors')
options.add_argument('--homedir=/tmp')
options.add_argument('--disk-cache-dir=/tmp/cache-dir')
options.add_argument('--remote-debugging-port=9222')
options.add_argument('--media-cache-size=33554432')
options.add_argument('--disable-dev-shm-usage')
options.add_argument('--disable-software-rasterizer')
options.add_argument('--mute-audio')
options.add_argument('--ignore-certificate-errors')
options.add_argument('--disable-setuid-sandbox')

driver = webdriver.Chrome(
    service_args=["--verbose", "--log-path={}".format(logPath)],
    executable_path='/usr/local/bin/chromedriver',
    options=options
)
```

This should solve the problem and allow your code to run on AWS Lambda.