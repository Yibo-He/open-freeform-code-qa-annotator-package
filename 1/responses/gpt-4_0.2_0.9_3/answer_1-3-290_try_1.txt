To get the mean SHAP values, you can use the `shap_values` object which is a list of arrays. Each array corresponds to a class and contains the SHAP values for each instance in the test set. You can calculate the mean SHAP value for each feature for each class by averaging over the instances.

Here's how you can do it:

```python
import numpy as np

# calculate mean SHAP values for each feature for each class
mean_shap_values = [np.mean(values, axis=0) for values in shap_values]

# create a DataFrame for easier viewing
mean_shap_values_df = pd.DataFrame(mean_shap_values, columns=X_test.columns)
```

The `mean_shap_values_df` DataFrame now contains the mean SHAP values for each feature for each class.

As for the class labels, the order of the classes in the `shap_values` list is the same as the order of the classes in the model's `classes_` attribute. You can check this order with `model.classes_`.

The `class_names` parameter in `shap.summary_plot` is used to rename the classes in the plot, but it doesn't change the order of the classes. So, the first class in `model.classes_` corresponds to the first class in `class_names`, the second class in `model.classes_` corresponds to the second class in `class_names`, and so on.

Here's how you can check the order of the classes:

```python
print(model.classes_)
```

This will print something like `['a', 'b', 'c']` or `['b', 'c', 'a']`, depending on how the classes were ordered in your dataset. You should use this order when specifying `class_names` in `shap.summary_plot`.