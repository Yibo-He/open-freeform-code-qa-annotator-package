Your code is almost correct. The issue is that you're not handling the last two elements of the array correctly. When `i` is the second last index of the array, `load[i+2]` is out of bounds. Similarly, when `i` is the last index of the array, both `load[i+1]` and `load[i+2]` are out of bounds.

You can fix this by adding special cases for the last two elements. Also, to get integer results, you can use `np.empty(len(load), dtype=int)` to create an array of integers.

Here is the corrected code:

```python
import numpy as np

load = np.array([10, 12, 9, 13, 17, 23, 25, 28, 26, 24, 22, 20, 18, 20, 22, 24, 26, 28, 23, 24, 21, 18, 16, 13])

output = np.empty(len(load), dtype=int)
for i in range(len(output)):
    if i == len(output) - 2:
        output[i] = load[i] + load[i+1]  # for second last element
    elif i == len(output) - 1:
        output[i] = load[i]  # for last element
    else:
        output[i] = load[i] + load[i+1] + load[i+2]  # for other elements

print(output)
```

This will give you the correct output:

```
[31 34 39 53 65 76 79 78 72 66 60 58 60 66 72 78 77 75 68 63 55 47 29 13]
```

This solution works, but it's not the most efficient way to do this in numpy. A more efficient way would be to use the `np.roll` function, which shifts the elements in the array. Here is how you can do it:

```python
import numpy as np

load = np.array([10, 12, 9, 13, 17, 23, 25, 28, 26, 24, 22, 20, 18, 20, 22, 24, 26, 28, 23, 24, 21, 18, 16, 13])

output = load + np.roll(load, -1) + np.roll(load, -2)
output[-2] = load[-2] + load[-1]
output[-1] = load[-1]

print(output)
```

This will give you the same output, but it's faster because it uses numpy's built-in functions, which are implemented in C and are much faster than Python loops.