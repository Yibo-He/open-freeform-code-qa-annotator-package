You are on the right track with your second approach. You can use the `rowSums` and `is.na` functions to count the number of NA values in each row for the specified columns. Then, you can filter out the rows where the count is equal to the total number of columns (which means all values are NA).

Here is how you can do it:

```r
final[rowSums(is.na(final[, 456:555])) != (555-456+1), ]
```

This line of code will keep the rows where the number of NA values in columns 456 to 555 is not equal to 100 (which is the total number of these columns). This means it will keep the rows where there is at least one non-NA value in these columns.