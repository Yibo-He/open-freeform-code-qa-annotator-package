Your recurrence relation seems to be a bit off. If I understand correctly, you're trying to find the number of ways to arrange `n` items with `k` different types, such that no two adjacent items are the same. 

If that's the case, then the recurrence relation should be as follows:

- For the first item, there are `k` ways to choose it.
- For the second item, there are `k-1` ways to choose it (since it can't be the same as the first item).
- For the third item onwards, each item can be chosen in `k-1` ways (since it can't be the same as the previous item).

So, the recurrence relation should be:

- `f(1) = k`
- `f(2) = k * (k-1)`
- `f(n) = (k-1) * (f(n-1) + f(n-2))` for `n > 2`

This is because for the `n`-th item, it can be either the same as the `(n-2)`-th item (and different from the `(n-1)`-th item), or different from both the `(n-1)`-th and `(n-2)`-th items.

Here's how the corrected code should look like:

```python
def count_num_ways(n, k):
    dp = [0 for _ in range(n+1)]

    dp[0] = 0
    dp[1] = k
    if n > 1:
        dp[2] = k * (k-1)

    for i in range(3, n+1):
        dp[i] = (k-1) * (dp[i-1] + dp[i-2])

    print(dp)
```

This code will correctly calculate the number of ways to arrange `n` items with `k` different types, such that no two adjacent items are the same.