To implement a multiple fields search with Django-filter, you can use the `Q` objects for complex lookups. `Q` objects allow you to use `|` (OR) and `&` (AND) operators in queries.

First, install django-filter if you haven't done so:

```
pip install django-filter
```

Then, in your `filters.py`:

```python
from django.db.models import Q
import django_filters
from .models import Location

class LocationFilter(django_filters.FilterSet):
    multi_name_fields = django_filters.CharFilter(method='filter_by_all_fields')

    class Meta:
        model = Location
        fields = []

    def filter_by_all_fields(self, queryset, name, value):
        return queryset.filter(
            Q(loc__icontains=value) | Q(loc_mansioned__icontains=value) |
            Q(loc_country__icontains=value) | Q(loc_modern__icontains=value)
        )
```

In this code, `filter_by_all_fields` is a custom method that will be used to filter the queryset. The `Q` objects are used to create a complex query that searches in all fields of the `Location` model.

Then, in your view:

```python
from django.shortcuts import render
from .models import Location
from .filters import LocationFilter

def search(request):
    location_list = Location.objects.all()
    location_filter = LocationFilter(request.GET, queryset=location_list)
    return render(request, 'my_app/template.html', {'filter': location_filter})
```

And finally, in your template:

```html
<form method="get">
    {{ filter.form.multi_name_fields }}
    <button type="submit">Search</button>
</form>
{% for location in filter.qs %}
    <p>{{ location.loc }}</p>
    <!-- Display other fields as needed -->
{% endfor %}
```

This will create a single input field that will search over all fields of the `Location` model.