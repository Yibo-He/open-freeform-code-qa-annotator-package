You can use the `numpy.amax` function along with the appropriate axis to get the maximum value of the third column in each 2D array. Here is how you can do it:

```python
import numpy as np

# Your 3D array
arr = np.array([[[4, 1, 5, 2, 5, 5, 7, 8, 9, 7],
                 [7, 4, 2, 4, 7, 8, 4, 1, 3, 5],
                 [6, 1, 2, 1, 1, 1, 2, 3, 7, 6],
                 [5, 5, 5, 0, 5, 4, 3, 8, 7, 1],
                 [2, 8, 6, 7, 4, 7, 5, 5, 5, 1]],

                [[9, 9, 5, 8, 0, 7, 3, 9, 8, 1],
                 [9, 1, 9, 5, 7, 4, 5, 4, 7, 0],
                 [1, 0, 4, 8, 7, 3, 4, 3, 8, 8],
                 [8, 1, 3, 1, 7, 0, 9, 9, 3, 8],
                 [4, 0, 2, 3, 8, 2, 0, 1, 2, 4]],

                [[1, 6, 2, 4, 4, 0, 2, 3, 0, 3],
                 [9, 6, 8, 6, 6, 5, 6, 9, 4, 1],
                 [0, 4, 0, 2, 9, 1, 1, 2, 4, 6],
                 [6, 1, 9, 9, 7, 8, 9, 7, 6, 8],
                 [9, 3, 9, 0, 7, 0, 0, 0, 7, 0]]])

# Get the max of the third column in each 2D array
max_3rd_column = np.amax(arr[:,:,2], axis=1)

# Reshape the result to a 2D array
max_3rd_column = max_3rd_column.reshape(-1, 1)

print(max_3rd_column)
```

This will output:

```
[[6]
 [9]
 [9]]
```

This is a 2D array where each element is the maximum value of the third column in each 2D array in the original 3D array.