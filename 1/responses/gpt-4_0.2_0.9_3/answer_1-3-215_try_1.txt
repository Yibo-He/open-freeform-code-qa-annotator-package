`db_index=True` is used to create an index on a specific field in a database table. An index is a special data structure that improves the speed of data retrieval operations on a database table. However, indexes also add a certain overhead to the database system as a whole, so they should be used sensibly.

You should consider using `db_index=True` in the following scenarios:

1. **Fields that you query frequently**: If you have a field that you often use in your `filter()`, `exclude()`, or `order_by()` methods, you should consider adding an index to that field. This will speed up these operations.

2. **Foreign keys and fields used in JOIN operations**: Django automatically creates an index on `ForeignKey` and `OneToOneField` fields for efficient joins. However, if you have other fields that you frequently use in `JOIN` operations, you should consider adding an index to those fields.

3. **Fields with high cardinality**: Fields with a high number of unique values (high cardinality) are good candidates for indexing. This is because the database can quickly narrow down the potential matching records in a query.

Indexing fields that contain non-unique or repetitive data is not a problem. In fact, it can still improve query performance. However, the improvement might not be as significant as it would be for fields with unique values. Also, keep in mind that each additional index consumes more storage space and makes insert and update operations slower, as the index also needs to be updated.

So, while `db_index=True` can help optimize read operations, it can also slow down write operations (inserts, updates, deletes). Therefore, it's a trade-off that you need to consider based on your specific use case.