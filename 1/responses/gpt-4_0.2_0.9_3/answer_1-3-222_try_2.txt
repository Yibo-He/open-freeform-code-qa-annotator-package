Your recurrence relation seems to be a bit off. The logic you're trying to implement is not clear from the description you've given. However, if you're trying to count the number of ways to arrange `n` elements with `k` different types, where no two adjacent elements can be the same, then the recurrence relation would be:

`dp[i] = (k-1) * (dp[i-1] + dp[i-2])`

Here's the explanation:
- For the first element, there are `k` possibilities.
- For the second element, it can be any of the remaining `k-1` types, so there are `k*(k-1)` possibilities for the first two elements.
- For the third and subsequent elements, each one can be any of the `k-1` types that are not the same as the immediately preceding element. This can be achieved in one of two ways:
  - The element is different from the last two elements. This can be done in `dp[i-2] * (k-1)` ways.
  - The element is the same as the second last element but different from the last element. This can be done in `dp[i-1] * (k-1)` ways.
  
So the total number of possibilities for `i` elements is `(k-1) * (dp[i-1] + dp[i-2])`.

Here's the corrected code:

```python
def count_num_ways(n, k):
    dp = [0 for i in range(n+1)]

    # base cases
    dp[0] = 0
    dp[1] = k
    if n > 1:
        dp[2] = k * (k-1)

    # fill the dp table
    for i in range(3, n+1):
        dp[i] = (k-1) * (dp[i-1] + dp[i-2])

    print(dp)
```

This code will print the number of ways for each number of elements from 0 to `n`. The final answer will be `dp[n]`.