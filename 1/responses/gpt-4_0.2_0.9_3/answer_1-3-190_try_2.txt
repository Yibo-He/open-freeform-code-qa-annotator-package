Your idea of using Celery to run a separate process for the MQTT client is not necessarily a bad one, but it does come with some potential issues. As you mentioned, Celery tasks are generally designed to be short-lived and not to run indefinitely. This could lead to problems if you're trying to maintain a persistent MQTT connection.

However, you could potentially work around this by having the Celery task periodically check if it should continue running and terminate itself if not. You could also use a heartbeat mechanism to ensure the task is still running and restart it if necessary.

Another potential issue is that Celery tasks are typically run in a separate process or even a separate machine, which could complicate communication between the task and your Django application. You would need to use a mechanism like Django Channels or a message queue to communicate between them.

An alternative approach could be to use a separate service to handle the MQTT communication. This service could be written in any language and would communicate with your Django application via HTTP or a message queue. This would allow you to use an MQTT library that is designed for long-lived connections and wouldn't require you to work around the limitations of Celery tasks.

In conclusion, while your idea is not necessarily a bad one, it does come with some potential complications. Depending on your specific needs and constraints, a separate service for MQTT communication might be a simpler and more robust solution.