The `@property` decorator in Python is used to convert a method into a "read-only" attribute of the same name. This means you can access the method as if it were an attribute, without needing to call it like a function.

In your example, `full_name` is a method. Without the `@property` decorator, you would call it like this:

```python
person = Person(first_name="John", last_name="Doe")
print(person.full_name())
```

But with the `@property` decorator, you can call it like this:

```python
person = Person(first_name="John", last_name="Doe")
print(person.full_name)
```

Notice that with `@property`, you don't need the parentheses. It's as if `full_name` were a field or attribute of the `Person` class, not a method. This can make your code cleaner and easier to read.

It's important to note that `@property` makes the attribute read-only. If you try to set a value to `full_name`, you'll get an error. If you want to be able to set the value as well, you can use the `@property_name.setter` decorator to define a setter method.