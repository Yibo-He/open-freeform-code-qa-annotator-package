In Rust, you can use the `futures` crate to achieve this. The `futures::future::join_all` function is equivalent to `Promise.all()` in JavaScript. It takes an iterator of futures and returns a future that resolves to a vector of the results of the input futures.

Here's how you can use it:

```rust
use futures::future::join_all;

async fn start_consumers(&self) {
    let mut v = Vec::new();
    for consumer in &self.consumers {
        v.push(consumer.consume());
    }
    let results = join_all(v).await;
}
```

In this code, `join_all(v).await` will return a vector of the results of all the futures. The futures are run concurrently, and `join_all` waits for all of them to complete.

Please note that you need to add `futures` to your `Cargo.toml`:

```toml
[dependencies]
futures = "0.3"
```

Also, make sure that your `consume` function returns a `Future`. If it doesn't, you'll need to wrap it in an `async` block or use `futures::future::ready` to turn the result into a `Future`.