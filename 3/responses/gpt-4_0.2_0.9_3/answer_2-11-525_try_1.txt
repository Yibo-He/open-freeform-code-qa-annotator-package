The issue here is that SFINAE (Substitution Failure Is Not An Error) only applies when the compiler is trying to instantiate a template. In your case, you're defining two different templates with the same name, which is not allowed in C++. The compiler doesn't get to the point of trying to instantiate the template, because it can't even compile the code due to the duplicate definitions.

To make SFINAE work, you need to put the `enable_if` in a place where it's part of the template instantiation process. A common way to do this is to put it in the template parameters of a function, or as a default template argument.

Here's a corrected version of your code:

```cpp
namespace detail {
    template <typename T, typename Enable = void>
    struct BaseType {
        using Type = std::decay_t<T>;
    };

    template <typename T>
    struct BaseType<T, std::enable_if_t<std::is_enum_v<T>>> {
        using Type = std::underlying_type_t<T>;
    };
}

template <class T>
using base_type_t = typename detail::BaseType<T>::Type;
```

In this version, the `enable_if` is part of the template parameters of the `BaseType` struct, so SFINAE applies. The first `BaseType` template is the default, and will be used if the `enable_if` in the second template fails. If the `enable_if` succeeds, the second template is a better match, so it will be used instead.