Yes, there is a more idiomatic way to express the same logic using `if let` and `else`:

```rust
fn main() {
    let mut foo: Option<u8> = None;
    if let Some(foo_val) = foo {
        if foo_val >= 5 {
            // do nothing
        } else {
            foo.replace(5);
        }
    } else {
        foo.replace(5);
    }
}
```

Or, you can use the `map_or` method to make it even more concise:

```rust
fn main() {
    let mut foo: Option<u8> = None;
    foo = foo.map_or(Some(5), |foo_val| if foo_val < 5 { Some(5) } else { Some(foo_val) });
}
```

In this version, `map_or` applies a function to the value inside the `Option` if it exists, or returns a default value (`Some(5)`) if the `Option` is `None`. The function checks if `foo_val` is less than 5, and if so, returns `Some(5)`, otherwise it returns the original value (`Some(foo_val)`).