In Rust, there's no built-in way to automatically map fields from one struct to another, especially if the types are different. You'll have to manually map the fields, but you can make this process more efficient by implementing a conversion function or using a macro.

Here's an example of how you might implement a conversion function:

```rust
impl From<Source> for Message {
    fn from(source: Source) -> Self {
        Message {
            id: 0, // or some default value
            email: source.email.to_string(),
            name: source.name.to_string(),
        }
    }
}
```

Then you can use this function to convert a `Source` to a `Message`:

```rust
let source = Source { ... };
let message = Message::from(source);
```

If you have many structs to convert, you might consider writing a macro to generate these conversion functions. However, macros in Rust can be complex and might be overkill for this situation.

Another approach is to use a library like `serde` for serialization and deserialization. You could serialize the `Source` struct to JSON, then deserialize it into a `Message`. This would require both structs to implement the `Serialize` and `Deserialize` traits, and would only work if the fields have the same names and compatible types. 

Here's an example:

```rust
use serde::{Serialize, Deserialize};

#[derive(Serialize, Deserialize)]
pub struct Message {
    pub id: i32,
    pub email: String,
    pub name: String,
}

#[derive(Serialize, Deserialize)]
pub struct Source {
    pub email: String,
    pub name: String,
}

let source = Source { ... };
let json = serde_json::to_string(&source).unwrap();
let message: Message = serde_json::from_str(&json).unwrap();
```

This approach is more flexible and can handle more complex scenarios, but it also has more overhead and might be slower than a simple conversion function.