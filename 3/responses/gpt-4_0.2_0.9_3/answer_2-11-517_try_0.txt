In C++, string interpolation is not as straightforward as in languages like C# or JavaScript. There's no built-in syntax for it. However, there are several ways to achieve similar results.

1. **Using `std::stringstream`**: This is a part of the standard library and allows you to concatenate different types of variables easily.

```cpp
#include <sstream>

int myVariable = 5;
std::stringstream ss;
ss << "My variable has value " << myVariable;
std::string result = ss.str();
```

2. **Using `std::to_string`**: This function can convert numeric types to a string, which can then be concatenated.

```cpp
int myVariable = 5;
std::string result = "My variable has value " + std::to_string(myVariable);
```

3. **Using `printf` or `sprintf`**: These are C-style functions but are still used in C++ for formatted output.

```cpp
int myVariable = 5;
char result[50];
sprintf(result, "My variable has value %d", myVariable);
```

4. **Using `fmt` library**: This is a modern, type-safe, and efficient formatting library for C++. It's not part of the standard library, but it's included in many modern C++ projects and will be part of C++20 standard.

```cpp
#include <fmt/core.h>

int myVariable = 5;
std::string result = fmt::format("My variable has value {}", myVariable);
```

Please note that the `fmt` library needs to be installed separately or it might be included in your project if you're using a recent version of C++.

In general, the choice between these methods depends on your specific needs and constraints. If you're writing modern C++ code and have access to the `fmt` library, that's probably the best choice. If you're working with older code or have constraints on what libraries you can use, `std::stringstream` or `std::to_string` might be more appropriate.