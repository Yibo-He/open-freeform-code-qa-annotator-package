In Rust, you can't set `TcpStream` to `nil` or `Default::default()`. Instead, you can use `Option<TcpStream>` for the `conn` field. This way, you can set `conn` to `None` in the `new` method and `Some(TcpStream)` in the `connect` method. Here's how you can do it:

```rust
use std::net::TcpStream;

pub struct FistClient {
    addr: String,
    conn: Option<TcpStream>,
}

impl FistClient {
    pub fn new(ip: &str, port: &str) -> Self {
        FistClient {
            addr: String::from(ip) + ":" + &String::from(port),
            conn: None,
        }
    }

    pub fn connect(&mut self) {
        let res = TcpStream::connect(&self.addr);
        match res {
            Ok(c) => self.conn = Some(c),
            Err(_) => panic!(),
        }
    }
}
```

In this code, `Option<TcpStream>` is used to represent the `conn` field. It can either be `Some(TcpStream)` when a connection is established or `None` when there is no connection. This is a common pattern in Rust to represent a value that can be absent.