Rust's standard library does not provide a built-in method to sort a vector by a predefined ordering. However, you can achieve this by using a custom function. Here's how you can do it:

```rust
fn sort_by_indices<T: Clone>(v: &mut Vec<T>, indices: &[usize]) {
    let mut temp = v.clone();
    for (i, &index) in indices.iter().enumerate() {
        v[i] = temp[index].clone();
    }
}
```

You can use this function like this:

```rust
let i = vec![0, 3, 2, 1];
let mut v = vec!["a", "b", "c", "d"];
sort_by_indices(&mut v, &i);

assert_eq!(v, vec!["a", "d", "c", "b"]);
```

This function works by creating a temporary copy of the vector, then it iterates over the indices vector and assigns the elements from the temporary vector to the original vector in the order specified by the indices.

Please note that this function requires the elements of the vector to implement the `Clone` trait because it needs to create a temporary copy of the vector. If your vector takes up a lot of memory and you can't afford to create a copy, you might need to use a more complex algorithm that sorts the vector in-place. This would likely involve swapping elements in the vector, which can be more complex and error-prone.