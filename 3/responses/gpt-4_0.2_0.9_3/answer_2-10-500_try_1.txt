In Rust, you can use the `sort_unstable_by_key` function to sort a vector in-place. However, there's no built-in function to sort a vector by another vector of indices. You can create a custom function to achieve this.

Here's an example of how you can do it:

```rust
fn sort_by_indices<T: Clone>(v: &mut Vec<T>, indices: &[usize]) {
    let mut temp = v.clone();
    for (i, &index) in indices.iter().enumerate() {
        v[i] = temp[index].clone();
    }
}
```

You can use this function like this:

```rust
let i = vec![0, 3, 2, 1];
let mut v = vec!["a", "b", "c", "d"];
sort_by_indices(&mut v, &i);

assert_eq!(v, vec!["a", "d", "c", "b"]);
```

This function works by creating a temporary copy of the original vector, then replacing each element in the original vector with the element at the corresponding index in the temporary vector.

However, this solution is not in-place as it creates a temporary copy of the vector. Unfortunately, there's no way to sort a vector in-place by another vector of indices in Rust without creating a temporary copy of the vector, because Rust's ownership model doesn't allow multiple mutable references to the same vector.