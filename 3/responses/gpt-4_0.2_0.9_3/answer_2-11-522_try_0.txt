In C++, the standard library does not provide any direct way to set the affinity of a thread (i.e., binding a thread to a specific CPU core). This is because C++ is designed to be a platform-independent language, and thread affinity is a concept that is very platform-specific. 

However, many systems provide their own platform-specific ways to set thread affinity. For example, on Linux systems, you can use the `pthread_setaffinity_np` function to set the affinity of a thread. On Windows systems, you can use the `SetThreadAffinityMask` function.

Here is an example of how you might set thread affinity on a Linux system:

```cpp
#include <pthread.h>
#include <stdio.h>

void* print_hello(void* data) {
    printf("Hello from new thread %u - I was set on CPU %d\n", pthread_self(), sched_getcpu());
    pthread_exit(NULL);
}

int main(int argc, char* argv[]) {
    pthread_t thread;
    cpu_set_t cpuset;

    CPU_ZERO(&cpuset);
    CPU_SET(2, &cpuset); // Set the thread to run on CPU 2

    pthread_create(&thread, NULL, print_hello, NULL);
    pthread_setaffinity_np(thread, sizeof(cpu_set_t), &cpuset);

    pthread_join(thread, NULL);
    return 0;
}
```

Remember that setting thread affinity can have complex effects on your program's performance, because it interferes with the operating system's ability to schedule threads efficiently. It's generally best to let the operating system handle thread scheduling, unless you have a specific reason to do otherwise.

As for querying a thread's properties, the standard C++ library does not provide much functionality in this area. You can get a thread's ID, and you can check whether a thread is joinable, but that's about it. For more detailed information about a thread, you would need to use platform-specific functions.