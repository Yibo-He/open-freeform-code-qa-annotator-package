In Rust, you can't set a value to `nil` like in Go. Instead, you can use `Option<TcpStream>` for your `conn` field. This allows you to set it to `None` initially and `Some(TcpStream)` when you have a connection. Here's how you can do it:

```rust
use std::net::TcpStream;
use std::io;

pub struct FistClient {
    addr: String,
    conn: Option<TcpStream>,
}

impl FistClient {
    pub fn new(ip: &str, port: &str) -> Self {
        FistClient {
            addr: String::from(ip) + ":" + &String::from(port),
            conn: None,
        }
    }

    pub fn connect(&mut self) -> io::Result<()> {
        match TcpStream::connect(&self.addr) {
            Ok(c) => {
                self.conn = Some(c);
                Ok(())
            },
            Err(e) => Err(e),
        }
    }
}
```

In the `connect` method, I've changed it to return a `Result` instead of panicking on an error. This allows the caller to handle the error as they see fit.