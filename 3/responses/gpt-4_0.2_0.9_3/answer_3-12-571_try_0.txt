You can achieve this by using a callback function. Here's how you can do it:

1. Define a callback function in your `RootPage` class that changes the `currentPage` widget.
2. Pass this callback function to your `FeedPage` class.
3. Call this callback function from your `FeedPage` class when you want to change the `currentPage` widget.

Here's how you can modify your code:

```dart
import 'package:flutter/material.dart';

class RootPage extends StatefulWidget {
  @override
  _RootPageState createState() => new _RootPageState();
}

class _RootPageState extends State<RootPage> {
  Widget currentPage;

  @override
  void initState() {
    super.initState();
    currentPage = FeedPage(onPageChange: changePage);
  }

  void changePage(Widget page) {
    setState(() {
      currentPage = page;
    });
  }

  @override
  Widget build(BuildContext context) {
    return new Scaffold(
      body: currentPage,
    );
  }
}

class FeedPage extends StatefulWidget {
  final Function onPageChange;

  FeedPage({this.onPageChange});

  @override
  _FeedPageState createState() => new _FeedPageState();
}

class _FeedPageState extends State<FeedPage> {
  @override
  Widget build(BuildContext context) {
    return new FlatButton(
      onPressed: () {
        widget.onPageChange(NewPage()); // NewPage is the new page you want to navigate to
      },
      child: new Text('Go to a new page but keep root, just replace this feed part'),
    );
  }
}

class NewPage extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Center(child: Text('New Page'));
  }
}
```

In this code, `NewPage` is the new page you want to navigate to. You can replace it with any other widget you want. The `onPageChange` function is called when the button in `FeedPage` is pressed. This function changes the `currentPage` widget in `RootPage` to the new page.