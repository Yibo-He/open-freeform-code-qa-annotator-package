To create a custom icon, you can use the `CustomPaint` widget. Here's an example of how you can create a custom Google icon:

```
class GoogleIcon extends StatelessWidget {
  final double size;
  final Color color;

  const GoogleIcon({Key? key, this.size = 24, this.color = Colors.red})
      : super(key: key);

  @override
  Widget build(BuildContext context) {
    return CustomPaint(
      size: Size(size, size),
      painter: _GoogleIconPainter(color),
    );
  }
}

class _GoogleIconPainter extends CustomPainter {
  final Color color;

  _GoogleIconPainter(this.color);

  @override
  void paint(Canvas canvas, Size size) {
    final paint = Paint()
      ..color = color
      ..style = PaintingStyle.fill;

    final path = Path()
      ..moveTo(12.0, 2.0)
      ..cubicTo(7.0, 2.0, 2.0, 6.0, 2.0, 12.0)
      ..cubicTo(2.0, 17.0, 7.0, 22.0, 12.0, 22.0)
      ..cubicTo(16.0, 22.0, 20.0, 17.0, 20.0, 12.0)
      ..cubicTo(20.0, 6.0, 16.0, 2.0, 12.0, 2.0)
      ..close()
      ..moveTo(18.0, 12.0)
      ..cubicTo(18.0, 14.5, 16.5, 16.5, 14.0, 16.5)
      ..cubicTo(11.5, 16.5, 10.0, 14.5, 10.0, 12.0)
      ..cubicTo(10.0, 9.5, 11.5, 7.5, 14.0, 7.5)
      ..cubicTo(16.5, 7.5, 18.0, 9.5, 18.0, 12.0)
      ..close();

    canvas.drawPath(path, paint);
  }

  @override
  bool shouldRepaint(_GoogleIconPainter oldDelegate) {
    return oldDelegate.color != color;
  }
}
```

Then, you can use this custom icon in your `BrandButton` widget like this:

```
BrandButton(
  label: 'Sign in with Google',
  backgroundColor: Colors.white,
  textColor: Colors.black,
  brandIcon: GoogleIcon(color: Colors.red),
)
```