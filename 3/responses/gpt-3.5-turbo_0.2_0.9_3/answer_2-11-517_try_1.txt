In C++, you can use the `std::stringstream` class to achieve string interpolation. Here's an example:

```
#include <iostream>
#include <sstream>

int main() {
    int myVariable = 42;
    std::stringstream ss;
    ss << "My variable has value " << myVariable;
    std::string result = ss.str();
    std::cout << result << std::endl;
    return 0;
}
```

In this example, we create a `std::stringstream` object and use the `<<` operator to insert the variable value into the string. We then convert the `stringstream` to a `std::string` using the `str()` method and print the result.

Another way to achieve string interpolation in C++ is to use the `boost::format` library. Here's an example:

```
#include <iostream>
#include <boost/format.hpp>

int main() {
    int myVariable = 42;
    std::string result = boost::str(boost::format("My variable has value %1%") % myVariable);
    std::cout << result << std::endl;
    return 0;
}
```

In this example, we use the `boost::format` function to create a formatted string. We use `%1%` as a placeholder for the variable value and use the `%` operator to insert the value into the string. We then convert the `boost::format` object to a `std::string` using the `boost::str` function and print the result.

Both of these methods are commonly used in C++ for string interpolation.