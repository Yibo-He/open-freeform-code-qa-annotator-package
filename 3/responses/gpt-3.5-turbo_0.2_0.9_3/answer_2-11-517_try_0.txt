In C++, you can use the `std::stringstream` class to achieve string interpolation. Here's an example:

```
#include <iostream>
#include <sstream>

int main() {
    int myVariable = 42;
    std::stringstream ss;
    ss << "My variable has value " << myVariable;
    std::string result = ss.str();
    std::cout << result << std::endl;
    return 0;
}
```

The `std::stringstream` class allows you to build a string by appending values to it. In this example, we first create an instance of `std::stringstream` called `ss`. We then append the string "My variable has value " and the value of `myVariable` to `ss`. Finally, we get the resulting string by calling `ss.str()` and store it in a variable called `result`.

This is a common way of doing string interpolation in C++. Another option is to use the `boost::format` library, which provides a more concise syntax for string interpolation. Here's an example:

```
#include <iostream>
#include <boost/format.hpp>

int main() {
    int myVariable = 42;
    std::string result = boost::str(boost::format("My variable has value %1%") % myVariable);
    std::cout << result << std::endl;
    return 0;
}
```

In this example, we use the `boost::format` function to create a formatted string. The `%1%` placeholder is replaced with the value of `myVariable`. We then use the `boost::str` function to convert the resulting `boost::format` object to a string.

Both of these methods are commonly used in C++ for string interpolation.