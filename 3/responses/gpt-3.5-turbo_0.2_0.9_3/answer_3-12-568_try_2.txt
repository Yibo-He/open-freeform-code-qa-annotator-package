Based on your requirements, it seems like you need to implement a background service that can run continuously and fetch data from external APIs periodically. Here are some options you can consider:

1. Flutter Isolate: Flutter provides an Isolate API that allows you to run code in a separate thread. You can use this API to create a background service that runs continuously and fetches data from external APIs. However, you need to be careful with memory management and ensure that your service does not consume too much memory.

2. Native Code: If you are comfortable with native code, you can use Kotlin or Java to create a background service that runs continuously and fetches data from external APIs. You can then use platform channels to communicate with your Flutter app.

3. Firebase Cloud Messaging: Firebase Cloud Messaging (FCM) provides a way to send notifications to your app, even when it is in the background. You can use FCM to trigger your app to fetch data from external APIs periodically.

4. WorkManager: WorkManager is a library provided by Android that allows you to schedule background tasks. You can use WorkManager to schedule periodic tasks that fetch data from external APIs.

In terms of simplicity, using Flutter Isolate or WorkManager may be the easiest options. However, if you need more control over the background service, using native code may be the best option. Ultimately, the best option depends on your specific requirements and preferences.