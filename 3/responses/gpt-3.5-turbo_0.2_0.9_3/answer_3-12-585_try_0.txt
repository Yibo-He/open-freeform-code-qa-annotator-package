To make the color darker, you can reduce the value of each of the RGB components of the color. To make the color lighter, you can increase the value of each of the RGB components of the color. Here's how you can implement the `toDarkColor` and `toLightColor` functions in JavaScript:

```
function toDarkColor(hashColor) {
  // Convert the hash color to RGB components
  const r = parseInt(hashColor.substring(1, 3), 16);
  const g = parseInt(hashColor.substring(3, 5), 16);
  const b = parseInt(hashColor.substring(5, 7), 16);

  // Reduce the value of each component by 20%
  const darkR = Math.round(r * 0.8);
  const darkG = Math.round(g * 0.8);
  const darkB = Math.round(b * 0.8);

  // Convert the dark color back to a hash color string
  const darkColor = "#" + darkR.toString(16) + darkG.toString(16) + darkB.toString(16);
  return darkColor;
}

function toLightColor(hashColor) {
  // Convert the hash color to RGB components
  const r = parseInt(hashColor.substring(1, 3), 16);
  const g = parseInt(hashColor.substring(3, 5), 16);
  const b = parseInt(hashColor.substring(5, 7), 16);

  // Increase the value of each component by 20%
  const lightR = Math.min(Math.round(r / 0.8), 255);
  const lightG = Math.min(Math.round(g / 0.8), 255);
  const lightB = Math.min(Math.round(b / 0.8), 255);

  // Convert the light color back to a hash color string
  const lightColor = "#" + lightR.toString(16) + lightG.toString(16) + lightB.toString(16);
  return lightColor;
}
```

You can call these functions like this:

```
const hashColor = "#159424";
const darkColor = toDarkColor(hashColor); // Returns "#0c6a19"
const lightColor = toLightColor(hashColor); // Returns "#1ca92d"
```