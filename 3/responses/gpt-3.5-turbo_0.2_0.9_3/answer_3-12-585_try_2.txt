To make a color darker or lighter, you can manipulate the RGB values of the color. Here's an example implementation of the `toDarkColor` and `toLightColor` functions:

```
toDarkColor(String hashColor){
  // Convert the hash string to RGB values
  int red = int.parse(hashColor.substring(1, 3), radix: 16);
  int green = int.parse(hashColor.substring(3, 5), radix: 16);
  int blue = int.parse(hashColor.substring(5, 7), radix: 16);

  // Reduce the RGB values to make the color darker
  red = (red * 0.8).round();
  green = (green * 0.8).round();
  blue = (blue * 0.8).round();

  // Convert the RGB values back to a hash string
  String darkColor = '#${red.toRadixString(16)}${green.toRadixString(16)}${blue.toRadixString(16)}';
  return darkColor;
}

toLightColor(String hashColor){
  // Convert the hash string to RGB values
  int red = int.parse(hashColor.substring(1, 3), radix: 16);
  int green = int.parse(hashColor.substring(3, 5), radix: 16);
  int blue = int.parse(hashColor.substring(5, 7), radix: 16);

  // Increase the RGB values to make the color lighter
  red = (red * 1.2).round();
  green = (green * 1.2).round();
  blue = (blue * 1.2).round();

  // Cap the RGB values at 255 to prevent overflow
  red = red > 255 ? 255 : red;
  green = green > 255 ? 255 : green;
  blue = blue > 255 ? 255 : blue;

  // Convert the RGB values back to a hash string
  String lightColor = '#${red.toRadixString(16)}${green.toRadixString(16)}${blue.toRadixString(16)}';
  return lightColor;
}
```

In the `toDarkColor` function, we reduce each RGB value by 20% to make the color darker. In the `toLightColor` function, we increase each RGB value by 20% to make the color lighter. We also cap the RGB values at 255 to prevent overflow.