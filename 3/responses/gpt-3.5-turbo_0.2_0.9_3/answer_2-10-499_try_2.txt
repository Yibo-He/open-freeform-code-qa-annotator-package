You can use an `Option<TcpStream>` instead of a `TcpStream` directly, and set the initial value to `None`. This way, you can set the value of `conn` to `Some(TcpStream)` when you establish a connection, or leave it as `None` if you haven't established a connection yet. Here's an updated version of your code:

```
pub struct FistClient {
    addr: String,
    conn: Option<TcpStream>,
}

impl FistClient {
    pub fn new(ip: &str, port: &str) -> Self {
        FistClient {
            addr: String::from(ip) + ":" + &String::from(port),
            conn: None,
        }
    }

    pub fn connect(&mut self) {
        let res = TcpStream::connect(&self.addr);
        match res {
            Ok(c) => self.conn = Some(c),
            Err(_) => panic!(),
        }
    }
}
```

Note that you don't need to pass the `ip` and `port` parameters to the `connect` method, since you've already stored them in the `addr` field.