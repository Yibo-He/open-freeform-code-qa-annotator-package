You can set the `conn` field to `None` using an `Option<TcpStream>` instead of `TcpStream`. Here's how you can modify your code to use `Option<TcpStream>`:

```
pub struct FistClient {
    addr: String,
    conn: Option<TcpStream>,
}

impl FistClient {
    pub fn new(ip: &str, port: &str) -> Self {
        FistClient {
            addr: String::from(ip) + ":" + &String::from(port),
            conn: None,
        }
    }

    pub fn connect(&mut self) {
        let res = TcpStream::connect(&self.addr);
        match res {
            Ok(c) => self.conn = Some(c),
            Err(_) => panic!(),
        }
    }
}
```

Now, the `conn` field is initialized to `None` in the `new` method. When you call the `connect` method, it will set the `conn` field to `Some(TcpStream)` if the connection is successful. You can then use `if let Some(conn) = &self.conn` to check if the connection is established before using it.