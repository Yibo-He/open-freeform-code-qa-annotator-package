To create a custom icon, you can use the `CustomPaint` widget in Flutter. Here's an example of how you can create a custom Google icon:

```
class GoogleIcon extends StatelessWidget {
  final double size;
  final Color color;

  const GoogleIcon({Key? key, this.size = 24, this.color = Colors.white})
      : super(key: key);

  @override
  Widget build(BuildContext context) {
    return CustomPaint(
      size: Size(size, size),
      painter: _GoogleIconPainter(color),
    );
  }
}

class _GoogleIconPainter extends CustomPainter {
  final Color color;

  _GoogleIconPainter(this.color);

  @override
  void paint(Canvas canvas, Size size) {
    final paint = Paint()
      ..color = color
      ..style = PaintingStyle.fill;

    final path = Path()
      ..moveTo(12.0, 2.0)
      ..cubicTo(7.0, 2.0, 2.0, 6.0, 2.0, 12.0)
      ..cubicTo(2.0, 17.0, 7.0, 22.0, 12.0, 22.0)
      ..cubicTo(16.0, 22.0, 20.0, 17.0, 20.0, 12.0)
      ..cubicTo(20.0, 6.0, 16.0, 2.0, 12.0, 2.0)
      ..close()
      ..moveTo(19.0, 12.0)
      ..cubicTo(19.0, 15.3, 16.8, 18.0, 13.9, 18.0)
      ..cubicTo(12.6, 18.0, 11.4, 17.4, 10.5, 16.5)
      ..lineTo(7.8, 13.8)
      ..cubicTo(7.5, 13.5, 7.0, 13.5, 6.7, 13.8)
      ..lineTo(4.0, 16.5)
      ..cubicTo(3.1, 17.4, 2.0, 15.9, 2.0, 14.5)
      ..lineTo(2.0, 9.5)
      ..cubicTo(2.0, 8.1, 3.1, 6.6, 4.0, 7.5)
      ..lineTo(6.7, 10.2)
      ..cubicTo(7.0, 10.5, 7.5, 10.5, 7.8, 10.2)
      ..lineTo(10.5, 7.5)
      ..cubicTo(11.4, 6.6, 12.6, 6.0, 13.9, 6.0)
      ..cubicTo(16.8, 6.0, 19.0, 8.7, 19.0, 12.0)
      ..close();

    canvas.drawPath(path, paint);
  }

  @override
  bool shouldRepaint(covariant CustomPainter oldDelegate) {
    return false;
  }
}
```

You can then use this custom icon in your `BrandButton` widget like this:

```
BrandButton(
  label: 'Sign in with Google',
  backgroundColor: Colors.red,
  brandIcon: GoogleIcon(),
),
```