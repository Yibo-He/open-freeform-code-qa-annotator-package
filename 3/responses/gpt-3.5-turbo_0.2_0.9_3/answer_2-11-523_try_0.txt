You are correct to be concerned about the order of evaluation in this case. According to the C++ standard, the order of evaluation of function arguments is unspecified. This means that the compiler is free to evaluate the arguments in any order it chooses, which could result in the right-hand side expression being evaluated before the left-hand side expression in the comparison.

However, in practice, most compilers evaluate function arguments from left to right. This means that in your example, the left-hand side expression (`lhs`) will be evaluated before the right-hand side expression (`rhs`), which is what you want.

To be on the safe side, you could use a temporary variable to hold the result of `std::exchange` and compare that to `v` instead:

```
do {
    path.push_front(v);
} while (v != (temp = std::exchange(v, pmap[v]), temp));
```

This ensures that `std::exchange` is evaluated before the comparison, regardless of the order of evaluation of function arguments.