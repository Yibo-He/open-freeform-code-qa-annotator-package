Yes, it is possible to achieve this in C++14 using variadic templates and `std::array`. Here's an example implementation:

```
#include <array>
#include <iostream>

struct Foo
{
    int a, b, c;
};

template <uint32_t argsCount, typename T, typename... Args>
void fun(std::array<T, argsCount> arg, Args... args)
{
    // Do something with arg
    for (const auto& elem : arg)
    {
        std::cout << elem.a << " " << elem.b << " " << elem.c << std::endl;
    }

    // Recursively call fun with remaining arguments
    fun(args...);
}

// Base case for recursion
template <uint32_t argsCount, typename T>
void fun(std::array<T, argsCount> arg)
{
    // Do something with arg
    for (const auto& elem : arg)
    {
        std::cout << elem.a << " " << elem.b << " " << elem.c << std::endl;
    }
}

int main()
{
    fun(std::array<Foo, 3>{ { {1, 2, 3}, {4, 5, 6}, {7, 8, 9} } });

    return 0;
}
```

In this implementation, the `fun` function takes a `std::array` of `T` with size `argsCount` as its first argument, followed by a variadic pack of arguments. The `fun` function then processes the `std::array` and recursively calls itself with the remaining arguments until the base case is reached.

Note that the `std::array` must be initialized with braces and nested braces to properly construct the `Foo` objects.