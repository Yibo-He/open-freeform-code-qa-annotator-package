To achieve the desired layout, you can use a `Row` widget with three children: a `IconButton` for the drawer, a `Text` widget for the title, and a `Row` widget with the action buttons.

Here's an example code:

```
appBar: AppBar(
  backgroundColor: CustomColors.accentColor,
  elevation: 0,
  leading: IconButton(
    icon: Icon(Icons.menu),
    onPressed: () {},
  ),
  title: Text(
    'Title',
    style: TextStyle(fontSize: 22.0, color: CustomColors.primaryDark),
  ),
  actions: <Widget>[
    Row(
      children: <Widget>[
        IconButton(
          icon: Icon(Icons.search),
          onPressed: () {},
        ),
        IconButton(
          icon: Icon(Icons.notifications),
          onPressed: () {},
        ),
      ],
    ),
  ],
),
```

In this code, we set the `backgroundColor` of the `AppBar` to the accent color and remove the elevation to achieve the desired look. The `leading` property is set to an `IconButton` with the drawer icon, and the `title` property is set to a `Text` widget with the title text. Finally, the `actions` property is set to a `Row` widget with two `IconButton` widgets for the search and notifications buttons.