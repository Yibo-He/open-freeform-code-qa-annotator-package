You can use the `chunks()` method of the `Vec` to group the elements into pairs, and then use `collect()` to create a `HashMap` from the pairs. Here's an example:

```rust
use std::collections::HashMap;

fn main() {
    let vec = vec!["key1", "value1", "key2", "value2", "key3", "value3"];
    let map: HashMap<_, _> = vec.chunks(2).map(|chunk| (chunk[0], chunk[1])).collect();
    println!("{:?}", map);
}
```

This will output:

```
{"key1": "value1", "key2": "value2", "key3": "value3"}
```

The `chunks()` method returns an iterator over non-overlapping chunks of the vector, where each chunk has a length of 2. The `map()` method is then used to transform each chunk into a tuple of `(key, value)`, and finally `collect()` is used to create a `HashMap` from the tuples.