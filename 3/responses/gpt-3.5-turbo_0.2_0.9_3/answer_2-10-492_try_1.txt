To transfer native SOL directly into the event account's vault address in an anchor smart contract instruction, you can use the `system_instruction::transfer` method provided by the Solana SDK. Here's an example of how you can use it:

```
use solana_program::{
    account_info::{next_account_info, AccountInfo},
    entrypoint::ProgramResult,
    program_error::ProgramError,
    pubkey::Pubkey,
    system_instruction,
};

pub fn transfer_sol_to_event_account(
    program_id: &Pubkey,
    accounts: &[AccountInfo],
    amount: u64,
) -> ProgramResult {
    let accounts_iter = &mut accounts.iter();
    let source_account = next_account_info(accounts_iter)?;
    let destination_account = next_account_info(accounts_iter)?;

    // Check if the source account has enough SOL to transfer
    if source_account.lamports() < amount {
        return Err(ProgramError::InsufficientFunds);
    }

    // Transfer SOL from the source account to the destination account
    let transfer_instruction = system_instruction::transfer(
        source_account.key,
        destination_account.key,
        amount,
    );
    solana_program::program::invoke_signed(
        &transfer_instruction,
        &[source_account.clone()],
        &[],
    )?;

    Ok(())
}
```

You can call this function from your anchor smart contract instruction by passing in the program ID, the source account (the user's wallet account), the destination account (the event account's vault address), and the amount of SOL to transfer.

Note that you need to import the `system_instruction` module from the Solana SDK to use the `transfer` method. Also, you need to make sure that the source account has enough SOL to transfer before calling this function.