Based on your requirements, it seems like you need to implement a background service that can run indefinitely and fetch data from external REST APIs periodically. Here are some options you can consider:

1. WorkManager: WorkManager is an Android Jetpack library that provides a simple API to schedule background tasks. It can run tasks immediately or at a specific time, and it can also handle network connectivity changes. WorkManager is recommended by Google for most background tasks, and it's easy to use with Flutter using the `flutter_workmanager` package.

2. Firebase Cloud Messaging (FCM): FCM is a cloud messaging service that allows you to send notifications and data messages to your app. You can use FCM to trigger background tasks in your app, even if it's not running. FCM is easy to integrate with Flutter using the `firebase_messaging` package.

3. AlarmManager: AlarmManager is an Android API that allows you to schedule tasks at specific times or intervals. It's a low-level API, but it's powerful and flexible. You can use AlarmManager to schedule periodic tasks in your app, and it's easy to use with Flutter using the `flutter_alarm_manager` package.

4. Isolate: Isolate is a Dart API that allows you to run code in a separate thread. You can use Isolate to run background tasks in your app, and it's easy to use with Flutter. However, Isolate doesn't provide any built-in scheduling or network connectivity features, so you'll need to implement those yourself.

Based on your requirements, I would recommend using WorkManager or FCM. WorkManager is a more modern and flexible API, while FCM is a simpler and more lightweight solution. Both options are well-supported and easy to use with Flutter.