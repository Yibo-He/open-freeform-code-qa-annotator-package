Template function with multiple parameters of same type

I'm trying to create a function that can take multiple parameters of the same type, passed in as a template. The number of arguments is known in compile time:
```
struct Foo
{
    int a, b, c;
};

template <uint32_t argsCount, typename T>
void fun(T ...args) // max number of args == argsCount
{
    // ...
    // std::array<T, argsCount>{ args... };
}

int main()
{
    fun<3, Foo>( { 1, 2, 3 }, { 4, 5, 6 }, { 7, 8, 9 } );

    // Dont want to do:
    // fun( Foo{}, Foo{}, Foo{} );
    // nor:
    // fun<Foo, Foo, Foo>( ... );

    return 0;
}
```

I must take into consideration these constraints:
- - 
Is it possible to do something similar in C++14 (preferably C++14, but curious what are the solutions in newer versions)?
edit: cleaned up the initial sloppy pseudcode.
