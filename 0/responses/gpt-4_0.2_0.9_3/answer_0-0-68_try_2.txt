The issue here is that you are trying to spy on the `useState` hook after the component has already been rendered with `shallow(<Counter/>)`. At this point, the `useState` hook has already been called, so the spy won't be able to catch it.

You need to set up the spy before rendering the component. Here's how you can do it:

```jsx
it('increment counter correctly', () => {
    const setState = jest.fn();
    const useStateSpy = jest.spyOn(React, 'useState');

    useStateSpy.mockImplementation((init) => [init, setState]);

    let wrapper = shallow(<Counter/>);

    const button = wrapper.find("button");
    button.simulate('click');
    expect(setState).toHaveBeenCalledWith(1);
})
```

However, this approach has a problem. The `useState` hook is not being called with the updated state, but with the initial state. This is because the `setState` mock function doesn't actually update the state. 

A better approach would be to test the behavior of the component, rather than the implementation details. You can do this by checking if the counter is incremented when the button is clicked:

```jsx
it('increment counter correctly', () => {
    let wrapper = shallow(<Counter/>);

    const button = wrapper.find("button");
    button.simulate('click');
    expect(wrapper.find('h2').text()).toEqual('1');
})
```

This test checks if the counter is incremented when the button is clicked, which is the actual behavior you want to test.