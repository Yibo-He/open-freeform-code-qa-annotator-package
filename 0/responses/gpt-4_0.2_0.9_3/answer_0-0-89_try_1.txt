The issue here is that you've marked the `value` prop as `required: true`. This means that the prop must always receive a value that is not `undefined`. In Vue.js, `null` is considered a valid value, but when a prop is marked as `required`, it cannot be `null` or `undefined`.

If you want to allow `null` values, you should remove the `required: true` from your prop definition. This will allow `null` and `undefined` values to pass the type validation.

Here's the corrected code:

```javascript
Vue.component('MyInput', Vue.extend({
  props: {
    value: {
      type: [String, Number, Boolean],
    },
  },
  template: `
    <select v-model="value">
      <option value="null">
        null value
      </option>
      <option value="">
        Empty value
      </option>
    </select>`,
}));
```

In this code, the `value` prop can be a `String`, `Number`, `Boolean`, `null`, or `undefined`. If you don't provide a value, Vue.js will not throw a warning.