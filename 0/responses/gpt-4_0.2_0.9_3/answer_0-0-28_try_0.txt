The issue you're facing is likely due to the lifecycle methods `componentDidMount` and `componentWillUnmount` being called at different times than you expect. When a component is unmounted, it doesn't necessarily mean that the modal is closed. The component could be unmounted for various reasons, such as a parent component re-rendering, causing all child components to unmount and remount.

A better approach would be to use the `componentDidUpdate` lifecycle method to check if the `show` prop has changed. If it has, you can then adjust the body overflow accordingly.

Here's how you could modify your code:

```jsx
export class Modal extends React.Component {

  componentDidUpdate(prevProps) {
    if (prevProps.show !== this.props.show) {
      document.body.style.overflow = this.props.show ? 'hidden' : 'unset';
    }
  }

  render() {
    // your render code
  }
}
```

In this code, `componentDidUpdate` is called whenever the props or state of the component changes. We're checking if the `show` prop has changed, and if it has, we're setting the body overflow to 'hidden' if the modal is shown, and 'unset' if it's not.

This should ensure that the body overflow is set correctly based on whether the modal is currently shown or not.