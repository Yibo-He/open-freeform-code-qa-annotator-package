It's not uncommon for developers to use both Jest and Cypress in the same project, as they serve different purposes. Jest is primarily used for unit testing and Cypress for end-to-end testing. 

Unit tests with Jest help to ensure that individual components of your application work as expected in isolation. These tests are typically quick to run and can be used to test a wide variety of scenarios, including edge cases that might be difficult to replicate in a full end-to-end test.

On the other hand, Cypress tests help to ensure that your application works as expected when all of its components are working together. These tests simulate real user interactions, so they can catch issues that unit tests might miss, such as problems with the way components interact with each other or with backend services.

While there is some overlap in what these tools can do, they each have their strengths and are typically used together to provide a comprehensive testing strategy.

However, maintaining two testing frameworks can indeed be more complex and time-consuming than just using one. If you find that this is the case for you, you might consider focusing on one tool that best fits your needs.

Your decision to use Cypress Component Testing is a good one, as it allows you to leverage the strengths of Cypress for both end-to-end and component testing, simplifying your testing strategy and reducing the overhead of maintaining multiple testing frameworks.

In conclusion, whether to use both Jest and Cypress, or just one of them, depends on your specific needs and circumstances. Both approaches can be effective, and the best choice depends on factors like the complexity of your application, the skills and preferences of your team, and the time and resources you have available for testing.