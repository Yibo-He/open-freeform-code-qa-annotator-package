The issue with your code is that you're defining `TabWrapper` inside the `Tab` component. This means that a new `TabWrapper` is created every time `Tab` is rendered, which is inefficient and can lead to performance issues.

To fix this, you should define `TabWrapper` outside of the `Tab` component. You can still pass props to `TabWrapper` to make it dynamic. Here's how you can refactor your code:

```jsx
import React from 'react'
import styled from 'styled-components'

const TabWrapper = styled.li`
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 100px;
    margin: 1px;
    font-size: 3em;
    color: ${props => (props.isSelected ? `white` : `black`)};
    background-color: ${props => (props.isSelected ? `black` : `#C4C4C4`)};
    cursor: ${props => (props.isSelected ? 'default' : `pointer`)};
`

const Tab = ({ onClick, isSelected, children }) => {
    return <TabWrapper onClick={onClick} isSelected={isSelected}>{children}</TabWrapper>
}

export default Tab
```

In this refactored code, `TabWrapper` is defined outside of `Tab`, so a new `TabWrapper` isn't created every time `Tab` is rendered. The `isSelected` prop is passed to `TabWrapper` in the `Tab` component's return statement, so you can still use it to dynamically style `TabWrapper`.