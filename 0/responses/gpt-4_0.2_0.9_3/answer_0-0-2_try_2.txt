It seems like you're on the right track. The `bypassSecurityTrustResourceUrl` method from Angular's DomSanitizer should be used to sanitize the base64 image URL. 

However, you need to ensure that you're binding the sanitized URL to your image source in your template. Here's how you can do it:

In your component:

```typescript
import { DomSanitizer, SafeResourceUrl } from '@angular/platform-browser';

// ...

base64Image: SafeResourceUrl;

constructor(private _sanitizer: DomSanitizer) { }

ngOnInit() {
  this.ImgUrl = this.inspectionDetails.reportImage;
  this.base64Image = this._sanitizer.bypassSecurityTrustResourceUrl('data:image/jpg;base64,' + this.ImgUrl);
}
```

In your template:

```html
<img [src]="base64Image" width="100%" height="100%" alt="Image" />
```

Here, `[src]="base64Image"` is used instead of `src="{{base64Image}}"` to bind the sanitized URL to the image source. This is because the former is property binding, which binds an input property to a DOM property, while the latter is interpolation, which is used to incorporate calculated strings into the text between HTML element tags and within attribute assignments. 

In this case, we want to bind the sanitized URL to the `src` property of the `img` element, so we use property binding.