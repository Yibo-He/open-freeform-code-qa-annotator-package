The problem you're facing is due to the fact that the Angular Material Tab component doesn't automatically scroll to the selected tab when it's not in the viewport. 

You can solve this by manually scrolling to the selected tab whenever a new tab is selected. 

First, you need to get a reference to the MatTabGroup component in your component class. You can do this by adding a template reference variable to the mat-tab-group element in your template:

```html
<mat-tab-group #tabGroup mat-stretch-tabs class="example-stretched-tabs mat-elevation-z4">
    <!-- tabs here -->
</mat-tab-group>
```

Then, in your component class, you can use the ViewChild decorator to get a reference to the MatTabGroup:

```typescript
import { ViewChild } from '@angular/core';
import { MatTabGroup } from '@angular/material/tabs';

export class YourComponent {
    @ViewChild('tabGroup') tabGroup: MatTabGroup;
}
```

Now, you can use the selectedIndexChange event of the MatTabGroup to scroll to the selected tab whenever a new tab is selected. You can do this by adding the following method to your component class:

```typescript
onTabChanged(index: number) {
    const tab = this.tabGroup._tabs.toArray()[index];
    const tabLabel = this.tabGroup._tabHeader._elementRef.nativeElement.querySelectorAll('.mat-tab-label')[index];
    tabLabel.scrollIntoView({ behavior: "smooth" });
}
```

And then bind this method to the selectedIndexChange event in your template:

```html
<mat-tab-group #tabGroup (selectedIndexChange)="onTabChanged($event)" mat-stretch-tabs class="example-stretched-tabs mat-elevation-z4">
    <!-- tabs here -->
</mat-tab-group>
```

This will ensure that the selected tab is always in the viewport.