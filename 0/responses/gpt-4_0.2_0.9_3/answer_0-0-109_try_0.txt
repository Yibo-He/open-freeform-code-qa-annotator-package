In JSON, `undefined` is not a valid value. JSON only supports these types: Object, Array, string, number, `true`, `false`, and `null`. 

If you're dealing with a JSON-like string that contains `undefined` values, you'll need to preprocess the string to either remove or replace the `undefined` values before parsing it with `JSON.parse`.

Here's a simple way to replace `undefined` with `null` in JavaScript:

```javascript
let jsonString = '{ "name": undefined}';
jsonString = jsonString.replace(/undefined/g, 'null');
let jsonObject = JSON.parse(jsonString);
```

In this code, we use the `replace` method with a regular expression to replace all instances of `undefined` with `null`. After this, the string can be parsed into a JSON object.

However, be aware that this approach could potentially replace `undefined` in string values as well, not just as standalone values. If this is a concern, you may need a more sophisticated approach to accurately parse the JSON-like string.

Also, it's worth noting that if you're receiving JSON-like strings with `undefined` values from an API, it might be worth reaching out to the API provider. This is not standard behavior and it could be a bug on their end.