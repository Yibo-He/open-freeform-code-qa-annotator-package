In Angular, the router does not reload the current page by default if you navigate to the same route. This is a performance feature to prevent unnecessary operations. However, you can force a route (and its component) to reload by using a custom RouteReuseStrategy.

In your case, you are trying to navigate to the same route, but it seems like you are not providing the `relativeTo` option in the `navigateToSelf` method. This could be the reason why the page is not reloading.

Here is how you can modify your `navigateToSelf` method:

```typescript
navigateToSelf(route: ActivatedRoute) {
  this.router.routeReuseStrategy.shouldReuseRoute = () => false;
  this.router.onSameUrlNavigation = "reload";
  const options: NavigationExtras = { relativeTo: route };
  this.router.navigate(['.'], options);
}
```

In this code, `relativeTo: route` tells the router to calculate the navigation path relative to the provided route.

Also, make sure that you reset the `shouldReuseRoute` function back to its original state after the navigation, to avoid affecting other navigations:

```typescript
navigateToSelf(route: ActivatedRoute) {
  const shouldReuseRoute = this.router.routeReuseStrategy.shouldReuseRoute;
  this.router.routeReuseStrategy.shouldReuseRoute = () => false;
  this.router.onSameUrlNavigation = "reload";
  const options: NavigationExtras = { relativeTo: route };
  this.router.navigate(['.'], options).then(() => {
    this.router.routeReuseStrategy.shouldReuseRoute = shouldReuseRoute;
  });
}
```

This way, the `shouldReuseRoute` function will be reset to its original state after the navigation is done, ensuring that other navigations are not affected.