The error you're encountering may not be related to a 'ignoreundefinedproperties' setting. In Node.js and Express, there isn't a built-in option to ignore undefined properties. The error might be due to trying to access a property of an undefined object.

Here are a few steps you can take to debug and fix your issue:

1. **Check your request body**: Make sure that the request body you're sending in your API call contains all the necessary properties that your API endpoint is expecting.

2. **Check your object properties**: If you're trying to access a property of an object, make sure that the object is defined before you try to access its properties. You can do this by adding a check like `if (object)` before trying to access `object.property`.

3. **Use a middleware to validate request**: You can use a middleware like `express-validator` to validate and sanitize your request data. This can help prevent errors due to missing or incorrect data.

4. **Use try/catch**: Wrap your code in a try/catch block to catch and handle errors. This can help you identify where the error is coming from.

5. **Check your error message**: The error message should give you more information about where and why the error is occurring. Make sure to read it carefully.

If you're using a database like Firestore, there is an option to ignore undefined properties. When you initialize your Firestore instance, you can set `ignoreUndefinedProperties` to true:

```javascript
const firestore = new Firestore({
  projectId: 'your-project-id',
  ignoreUndefinedProperties: true,
});
```

This will prevent Firestore from throwing errors when you try to write an object with undefined properties to your database. However, this won't prevent errors from occurring in your Node.js and Express code if you try to access a property of an undefined object.