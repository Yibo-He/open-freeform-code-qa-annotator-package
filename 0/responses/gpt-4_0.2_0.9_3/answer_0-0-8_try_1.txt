You can use a recursive function to traverse through your JSON object tree. Here's a simple JavaScript function that should do the trick:

```javascript
function findObject(id, obj) {
    if (obj.id === id) {
        return obj;
    }
    for (let i = 0; i < obj.child.length; i++) {
        let found = findObject(id, obj.child[i]);
        if (found) return found;
    }
}
```

You can call this function with your desired ID and the root of your JSON object tree:

```javascript
let data = {
    "id": "A",
    "name": "Item A",
    "child": [
        {
            "id": "B",
            "name": "Item B",
            "child": [
                {
                    "id": "C",
                    "name": "Item C",
                    "child": []
                }
            ]
        },
        {
            "id": "D",
            "name": "Item D",
            "child": []
        }
    ]
};

let result = findObject("C", data);
console.log(result);
```

This will output:

```javascript
{
  "id": "C",
  "name": "Item C",
  "child": []
}
```

This function works by checking if the current object's ID matches the desired ID. If it does, it returns the object. If it doesn't, it recursively calls `findObject` on each of the object's children. If a match is found in a child, it is returned. If no match is found, the function will return `undefined`.