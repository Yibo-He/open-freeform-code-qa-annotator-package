The issue you're experiencing is related to how Tailwind's Just-In-Time (JIT) mode works. In JIT mode, Tailwind generates styles on-demand as you reference them in your template. It doesn't generate styles that aren't being used in your code. This is why it's called "Just-In-Time".

In your case, when you're using template literals to generate class names like `col-span-${colSpan}`, Tailwind's JIT compiler can't detect these classes because they are dynamically generated. It only sees the literal string "col-span-${colSpan}", not the actual class name that gets generated at runtime.

When you pasted the HTML from the Tailwind tutorial, it included classes like `col-span-2` and `row-span-3`. The JIT compiler saw these classes and generated the corresponding styles. When you undid the changes, the styles remained in the generated CSS, which is why your button suddenly started spanning two columns as intended.

To solve this issue, you can either:

1. Use PurgeCSS to specify the possible class names in your code. This way, Tailwind's JIT compiler will generate the necessary styles.

2. Avoid using template literals to generate class names. Instead, use conditional rendering to apply different classes based on your component's props.

Here's an example of how you could do the latter:

```jsx
const Button = ({ colSpan = 1, rowSpan = 1, children }) => {
  let colClass = '';
  let rowClass = '';

  switch(colSpan) {
    case 1:
      colClass = 'col-span-1';
      break;
    case 2:
      colClass = 'col-span-2';
      break;
    // Add more cases as needed
  }

  switch(rowSpan) {
    case 1:
      rowClass = 'row-span-1';
      break;
    case 2:
      rowClass = 'row-span-2';
      break;
    // Add more cases as needed
  }

  return (
    <div className={`${colClass} ${rowClass} bg-white p-3 rounded`}>
      <div className="flex items-center justify-center">{children}</div>
    </div>
  );
};
```

This way, the JIT compiler can see all the class names directly in your code and generate the necessary styles.