You can use the `map` function to create a new array with the updated car values. Here is how you can do it:

```javascript
const updatedData = data.map((item, index) => {
  return { ...item, car: newData[index] };
});
```

In this code, `map` function is used to create a new array. For each item in the `data` array, it creates a new object with all properties of the original item (`...item`) and updates the `car` property with the corresponding value from the `newData` array (`newData[index]`).

Then you can use `updatedData` in your component:

```javascript
export default function App() {
  const updatedData = data.map((item, index) => {
    return { ...item, car: newData[index] };
  });

  return (
    <div className="App">
      {updatedData?.map((item) => {
        return <li key={item.id}>{item.car}</li>;
      })}
    </div>
  );
}
```

Please note that this code assumes that `data` and `newData` arrays have the same length. If `newData` is shorter than `data`, some of the `car` properties will be set to `undefined`. If `newData` is longer, extra values will be ignored.