The issue you're experiencing is related to Tailwind's Just-In-Time (JIT) mode. In JIT mode, Tailwind generates styles on-demand as you use them, which means it needs to be able to find all of your usage in your templates to generate the right CSS.

When you use template literals to generate class names dynamically like `col-span-${colSpan}`, Tailwind's JIT compiler can't see the possible values that `colSpan` can have, so it doesn't generate the corresponding CSS classes.

When you pasted the HTML from the Tailwind tutorial, it included a `col-span-2` class. This caused Tailwind's JIT compiler to generate the `col-span-2` class, which is why your button started working as expected.

To fix this issue, you can use a switch statement or an object mapping to explicitly use the classes you need. This way, Tailwind's JIT compiler can see them and generate the correct CSS. Here's an example:

```jsx
const Button = ({ colSpan = 1, rowSpan = 1, children }) => {
  const colSpanClasses = {
    1: 'col-span-1',
    2: 'col-span-2',
    // Add more as needed
  };

  const rowSpanClasses = {
    1: 'row-span-1',
    // Add more as needed
  };

  return (
    <div
      className={`${colSpanClasses[colSpan]} ${rowSpanClasses[rowSpan]} bg-white p-3 rounded`}
    >
      <div className="flex items-center justify-center">{children}</div>
    </div>
  );
};
```

This way, you're explicitly using the classes `col-span-1` and `col-span-2`, so Tailwind's JIT compiler will generate them.