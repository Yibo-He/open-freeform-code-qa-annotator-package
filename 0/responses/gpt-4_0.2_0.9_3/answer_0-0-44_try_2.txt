The `index` property in the `@Prop` decorator should work, but you need to ensure that the indexes are actually being created in MongoDB. This is not done automatically when you define the schema, you need to call `ensureIndexes` function on the model.

Here is how you can do it:

```typescript
import { Injectable, OnModuleInit } from '@nestjs/common';
import { InjectModel } from '@nestjs/mongoose';
import { Model } from 'mongoose';

@Injectable()
export class MyService implements OnModuleInit {
  constructor(@InjectModel('MyModel') private readonly myModel: Model<MyModelDocument>) {}

  async onModuleInit(): Promise<void> {
    await this.myModel.init();
    await this.myModel.ensureIndexes(); // This is the important line
  }
}
```

In this example, `MyService` is a service that injects the Mongoose model for your schema. The `onModuleInit` function is a lifecycle hook provided by NestJS that is called when the module is initialized. In this function, we call `ensureIndexes` on the model, which will create the indexes in MongoDB.

Remember to replace `'MyModel'` and `MyModelDocument` with the actual name of your model and document interface.

Also, please note that creating indexes can be a time-consuming operation if you have a lot of data in your collection, so it's not recommended to do it on application startup in a production environment. Instead, you should manage your database schema and indexes separately, for example by using a database migration tool.