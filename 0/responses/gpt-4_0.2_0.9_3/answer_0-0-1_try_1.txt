The issue you're experiencing might be due to the way Vercel handles Next.js routing. 

Here are a few things you could try:

1. **Check your routes:** Make sure all your routes are correctly defined in your Next.js application. Remember that Next.js uses a file-based router built on the concept of pages. When a file is added to the `pages` directory it's automatically available as a route.

2. **Check your dynamic routes:** In your case, you're using dynamic routes (`[id].tsx`). Make sure you're using the `getStaticPaths` function to specify which paths Next.js should pre-render at build time. If you're using `getServerSideProps` or `getInitialProps` instead, it might cause issues with Vercel.

3. **Check your build command:** Make sure you're using the correct build command in your Vercel settings. For a Next.js application, it should be `npm run build` or `yarn build`.

4. **Check your output directory:** By default, Next.js will output your build to the `.next` directory. Make sure this is not being ignored in your `.gitignore` or `.vercelignore` files.

5. **Check your dependencies:** Make sure all your dependencies are correctly installed and up-to-date. Sometimes, a missing or outdated dependency can cause issues with the build process.

6. **Check your logs:** Vercel provides detailed logs of your build process. Check these logs for any errors or warnings that might indicate what's going wrong.

If none of these suggestions help, you might want to consider reaching out to Vercel's support or checking their documentation for more information.