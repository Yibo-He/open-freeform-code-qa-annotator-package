The error message you're seeing is related to SSL/TLS. It seems like your Elasticsearch cluster is using a self-signed certificate, and your Node.js application doesn't trust this certificate.

Node.js uses a set of trusted "root" certificates, and if the certificate from your Elasticsearch cluster isn't signed by one of these root certificates, you'll get the error you're seeing.

To fix this, you have a couple of options:

1. **Disable SSL/TLS verification in your Node.js application.** This is the easiest solution, but it's also the least secure. It means your application won't verify the identity of your Elasticsearch cluster, which could leave you vulnerable to man-in-the-middle attacks. Here's how you can do it:

```javascript
const client = new elasticsearch.Client({
  node: process.env.elasticsearch_node,
  ssl: {
    rejectUnauthorized: false
  }
});
```

2. **Add the self-signed certificate to your Node.js application's list of trusted certificates.** This is more secure, but it's also a bit more complicated. You'll need to export the self-signed certificate from your Elasticsearch cluster, and then import it into your Node.js application. Here's a general idea of how you can do it:

```javascript
const https = require('https');
const fs = require('fs');

// Read the certificate file
const cert = fs.readFileSync('/path/to/your/certificate.pem');

const client = new elasticsearch.Client({
  node: process.env.elasticsearch_node,
  ssl: {
    ca: cert
  }
});
```

Remember to replace '/path/to/your/certificate.pem' with the actual path to your certificate file.

Please note that these solutions are for the `elasticsearch` client. If you're using the `@elastic/elasticsearch` client, the options might be slightly different.