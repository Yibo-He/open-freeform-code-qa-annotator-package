The error you're experiencing may not be directly related to a setting called 'ignoreundefinedproperties'. There isn't a built-in option in Express.js or Node.js called 'ignoreundefinedproperties'. 

However, the error you're seeing is likely due to trying to access a property of an object that hasn't been defined. This is a common error in JavaScript and can be mitigated by checking if the object and the property exist before trying to access it.

Here's an example:

```javascript
app.get('/api/route', (req, res) => {
    if(req.body && req.body.property){
        // Do something with req.body.property
    } else {
        // Handle the error or return a default value
    }
});
```

In this example, `req.body && req.body.property` checks if `req.body` is defined and if `req.body.property` is defined before trying to access it.

If you're using a newer version of JavaScript, you can use optional chaining which makes this even easier:

```javascript
app.get('/api/route', (req, res) => {
    const property = req.body?.property;
    if(property){
        // Do something with property
    } else {
        // Handle the error or return a default value
    }
});
```

In this example, `req.body?.property` will return `undefined` if `req.body` or `req.body.property` is not defined, preventing the undefined error.

If you're still having trouble, you might want to check your middleware setup in Express.js. Make sure you're using `body-parser` or the built-in `express.json()` middleware if you're trying to access JSON data from the request body.