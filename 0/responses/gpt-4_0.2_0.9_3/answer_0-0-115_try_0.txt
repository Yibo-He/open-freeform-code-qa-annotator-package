The issue you're facing is because `create-react-app` doesn't support the `paths` option out of the box. This is because `create-react-app` uses Babel to transpile TypeScript, and Babel doesn't understand TypeScript's `paths` option.

However, there are a few workarounds to this:

1. **Using `react-app-rewired` and `react-app-rewire-alias`:** You can use these packages to override the webpack configuration used by `create-react-app` without ejecting.

   First, install the packages:

   ```
   npm install --save-dev react-app-rewired react-app-rewire-alias
   ```

   Then, create a `config-overrides.js` file in your project root:

   ```javascript
   const rewireAliases = require('react-app-rewire-alias');

   module.exports = function override(config, env) {
     config = rewireAliases.aliasesOptions({
       '@store': 'src/store',
     })(config, env);

     return config;
   };
   ```

   Finally, modify the `scripts` section in your `package.json`:

   ```json
   "scripts": {
     "start": "react-app-rewired start",
     "build": "react-app-rewired build",
     "test": "react-app-rewired test",
     "eject": "react-scripts eject"
   }
   ```

2. **Using `craco` (Create React App Configuration Override):** This is a more powerful and flexible way to customize `create-react-app` configurations.

   First, install `craco`:

   ```
   npm install @craco/craco
   ```

   Then, create a `craco.config.js` file in your project root:

   ```javascript
   const path = require('path');

   module.exports = {
     webpack: {
       alias: {
         '@store': path.resolve(__dirname, 'src/store/'),
       },
     },
   };
   ```

   Finally, modify the `scripts` section in your `package.json`:

   ```json
   "scripts": {
     "start": "craco start",
     "build": "craco build",
     "test": "craco test",
     "eject": "react-scripts eject"
   }
   ```

Remember to adjust the paths according to your project structure. After applying these changes, you should be able to use the `@store` alias in your imports.