You can use the `map` function to create a new array with the updated car values. Here's how you can do it:

```javascript
const updatedData = data.map((item, index) => {
  return { ...item, car: newData[index] };
});
```

This will create a new array `updatedData` where each object is a copy of the corresponding object in the `data` array, but with the `car` property replaced by the corresponding value from the `newData` array.

Then, you can use `updatedData` in your component:

```javascript
export default function App() {
  const updatedData = data.map((item, index) => {
    return { ...item, car: newData[index] };
  });

  return (
    <div className="App">
      {updatedData?.map((item) => {
        return <li key={item.id}>{item.car}</li>;
      })}
    </div>
  );
}
```

This will display the updated car values in your component.

Please note that this assumes that the `data` and `newData` arrays have the same length. If `newData` is shorter than `data`, some of the `car` properties in the `updatedData` array will be `undefined`. If `newData` is longer than `data`, the extra values will be ignored.