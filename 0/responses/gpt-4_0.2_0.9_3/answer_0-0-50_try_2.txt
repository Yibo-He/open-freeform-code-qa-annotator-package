The `"esModuleInterop": true` and `"allowSyntheticDefaultImports": true` options in the TypeScript configuration file are indeed related to how TypeScript handles modules.

Let's break it down:

1. `"esModuleInterop": true`: This option changes how TypeScript interoperates with CommonJS and AMD modules to be more compatible with Babel. It enables a new way of importing CommonJS modules that is more compatible with the ES6 import syntax. Without this option, you might have to use the `import * as express from 'express'` syntax when importing a CommonJS module. With this option enabled, you can use the `import express from 'express'` syntax.

2. `"allowSyntheticDefaultImports": true`: This option is related to type checking and IntelliSense. When this option is enabled, you can use default imports (`import express from 'express'`) even if the module you're importing doesn't have a default export. This doesn't change the actual runtime behavior of your code, it only affects type checking and IntelliSense.

The official documentation for `allowSyntheticDefaultImports` says that it "does not affect code emit, just typechecking" because enabling this option doesn't change how your TypeScript code is compiled to JavaScript. It only changes how TypeScript checks your code for errors and provides IntelliSense suggestions.

As for the StackOverflow question you linked, it's asking whether the `esModuleInterop` option can be specified in the `tsconfig.json` file instead of as a command-line flag. The answer is yes, it can be specified in the `tsconfig.json` file, as you've seen in the example you provided.

The `--esModuleInterop` definition from the compiler page is saying that when this option is enabled, TypeScript will generate some extra code (`__importStar` and `__importDefault` helpers) in the compiled JavaScript to ensure compatibility with the Babel ecosystem at runtime. It also automatically enables the `allowSyntheticDefaultImports` option for compatibility with the TypeScript type system.