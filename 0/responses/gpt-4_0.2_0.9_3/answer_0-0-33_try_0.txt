The issue you're experiencing is due to the way IIS handles routing. By default, IIS doesn't know how to handle client-side routing, so when a route doesn't match any server-side routes, it returns a 404 error.

To solve this issue, you need to configure IIS to redirect all requests to your React app, letting React Router handle the routing. Here are the steps to do this:

1. Install the URL Rewrite module in IIS. You can download it from the official Microsoft website.

2. Once installed, open IIS Manager and select your website.

3. In the Features View, double-click on URL Rewrite.

4. In the Actions pane, click on "Add Rule(s)...".

5. In the Add Rules dialog, under Inbound rules, select "Blank rule" and click OK.

6. In the Edit Inbound Rule dialog, give your rule a name (e.g., "React Routing").

7. Under Match URL, set the following:
   - Requested URL: Matches the Pattern
   - Using: Regular Expressions
   - Pattern: `.*`

8. Under Action, set the following:
   - Action type: Rewrite
   - Rewrite URL: `/index.html`
   - Append query string: Checked

9. Click Apply in the Actions pane.

This rule tells IIS to redirect all requests to your `index.html` file, which is the entry point of your React app. This way, React Router can handle all the routing.

Remember to build your React app for production (`npm run build`) and deploy the built files to IIS.

Also, ensure that the web.config file generated by the build process is present in the root directory of your website in IIS. This file contains necessary configuration for IIS to properly serve your React app.

If you still encounter issues, you may need to adjust your React Router configuration. For example, you might need to use `BrowserRouter` instead of `Router`, or you might need to provide a `basename` prop to `BrowserRouter` if your app is served from a subdirectory.