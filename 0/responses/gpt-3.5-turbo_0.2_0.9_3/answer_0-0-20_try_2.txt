The issue with the current implementation is that a new styled component is created every time the `Tab` component is rendered. This can negatively impact performance, especially if the `Tab` component is used frequently.

To fix this, you can move the styled component outside of the `Tab` component and pass the required props as arguments to the styled component. Here's an example:

```
import React from 'react'
import styled from 'styled-components'

const TabWrapper = styled.li`
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 100px;
  margin: 1px;
  font-size: 3em;
  color: ${props => (props.isSelected ? `white` : `black`)};
  background-color: ${props => (props.isSelected ? `black` : `#C4C4C4`)};
  cursor: ${props => (props.isSelected ? 'default' : `pointer`)};
`

const Tab = ({ onClick, isSelected, children }) => {
  return <TabWrapper onClick={onClick} isSelected={isSelected}>{children}</TabWrapper>
}

export default Tab
```

In this updated implementation, the `TabWrapper` styled component is defined outside of the `Tab` component. The required props (`isSelected`) are passed as arguments to the styled component, and the `Tab` component simply renders the `TabWrapper` component with the required props. This way, the styled component is only created once and can be reused multiple times without negatively impacting performance.