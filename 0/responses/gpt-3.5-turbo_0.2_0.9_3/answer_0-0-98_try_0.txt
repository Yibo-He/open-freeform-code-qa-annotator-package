To display the version of your React app in the footer in the format you mentioned, you can create a version file in your project's root directory and add the version number to it. Then, you can import this file into your React component and display the version number in the footer.

To increment the version number every time you deploy the app, you can use a build tool like Webpack or Gulp to automate the process. You can create a script that prompts you to choose whether to increment the major, minor, or patch version number and then updates the version file accordingly.

Here's an example script using Node.js and the `inquirer` package to prompt the user for the version increment type:

```
const fs = require('fs');
const inquirer = require('inquirer');

// Read the current version from the version file
const version = fs.readFileSync('./version.txt', 'utf8').trim();

// Prompt the user for the version increment type
inquirer.prompt([
  {
    type: 'list',
    name: 'incrementType',
    message: 'Choose the version increment type:',
    choices: ['major', 'minor', 'patch']
  }
]).then(answers => {
  // Increment the version number based on the user's choice
  const [major, minor, patch] = version.split('.');
  let newVersion;
  switch (answers.incrementType) {
    case 'major':
      newVersion = `${Number(major) + 1}.0.0`;
      break;
    case 'minor':
      newVersion = `${major}.${Number(minor) + 1}.0`;
      break;
    case 'patch':
      newVersion = `${major}.${minor}.${Number(patch) + 1}`;
      break;
  }

  // Write the new version to the version file
  fs.writeFileSync('./version.txt', newVersion);

  console.log(`Version updated to ${newVersion}`);
});
```

You can then add this script to your build process to automatically update the version number before deploying your app.