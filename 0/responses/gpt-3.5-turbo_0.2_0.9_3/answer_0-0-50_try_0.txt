`"esModuleInterop": true` is a compiler option in TypeScript that allows for interoperability between CommonJS and ES modules. When using CommonJS modules, the `require()` function is used to import modules, while ES modules use the `import` statement. By setting `"esModuleInterop": true`, TypeScript will allow you to use `import` statements to import CommonJS modules. This is useful when working with libraries that use CommonJS modules, but you want to use ES modules in your own code.

`"allowSyntheticDefaultImports": true` is another compiler option that allows you to import modules that don't have a default export as if they did have one. This is useful when working with libraries that don't have a default export, but you want to use them as if they did. For example, if you have a module that exports multiple named exports, you can use `import myModule from './myModule'` instead of `import * as myModule from './myModule'`.

The statement "Allow default imports from modules with no default export. This does not affect code emit, just typechecking." means that if you set `"allowSyntheticDefaultImports": true`, TypeScript will allow you to use default imports for modules that don't have a default export, but it won't affect the generated JavaScript code. It only affects the type checking performed by TypeScript.

Regarding the question you linked, `--esModuleInterop` is a command line flag that sets the `"esModuleInterop": true` compiler option. You can also set this option in your `tsconfig.json` file by adding `"esModuleInterop": true` to the `"compilerOptions"` object.