You can use the `map` method to update the `car` property of each object in the `data` array with the corresponding value from the `newData` array. Here's an example:

```
const updatedData = data.map((item, index) => {
  return {
    ...item,
    car: newData[index]
  };
});
```

This code creates a new array `updatedData` by mapping over the `data` array. For each object in the `data` array, it creates a new object with the spread operator (`...item`) to copy all the properties from the original object, and then sets the `car` property to the corresponding value from the `newData` array using the `index` parameter of the `map` function.

Then, you can use the `updatedData` array to display the updated car values in your component:

```
export default function App() {
  const updatedData = data.map((item, index) => {
    return {
      ...item,
      car: newData[index]
    };
  });

  return (
    <div className="App">
      {updatedData?.map((item) => {
        return <li key={item.id}>{item.car}</li>;
      })}
    </div>
  );
}
``` 

This code creates the `updatedData` array inside the component, and then maps over it to display the updated car values.