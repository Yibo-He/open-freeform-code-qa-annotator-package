Here are the recommended `tsconfig.json` settings for outputting code that's going to be run on Node.js 12:

```json
{
  "compilerOptions": {
    "target": "es2019",
    "module": "commonjs",
    "lib": ["es2019"],
    "esModuleInterop": true,
    "strict": true,
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "declaration": false,
    "outDir": "./dist",
    "rootDir": "./src"
  },
  "exclude": ["node_modules", "dist"]
}
```

Explanation of the settings:

- `target`: The version of ECMAScript to compile to. Node.js 12 supports ES2019, so we set this to `es2019`.
- `module`: The module system to use. Node.js uses CommonJS, so we set this to `commonjs`.
- `lib`: The library files to include. We only need the ES2019 library, so we set this to `["es2019"]`.
- `esModuleInterop`: Enables interoperability between CommonJS and ES Modules. This is required for some libraries to work correctly.
- `strict`: Enables strict type-checking options.
- `moduleResolution`: Specifies how modules should be resolved. We set this to `node` to use Node.js's module resolution algorithm.
- `resolveJsonModule`: Enables importing JSON files as modules.
- `declaration`: Generates corresponding `.d.ts` files for each TypeScript file.
- `outDir`: The output directory for compiled files.
- `rootDir`: The root directory for TypeScript source files.
- `exclude`: Directories or files to exclude from compilation.

Note that these settings are just recommendations and may need to be adjusted based on your specific project requirements.