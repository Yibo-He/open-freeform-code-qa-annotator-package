Here are the recommended `tsconfig.json` settings for outputting code that's going to be run on Node.js 12:

```json
{
  "compilerOptions": {
    "target": "es2019",
    "module": "commonjs",
    "lib": ["es2019"],
    "esModuleInterop": true,
    "strict": true,
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "declaration": false,
    "outDir": "./dist",
    "sourceMap": true
  },
  "include": ["src/**/*"],
  "exclude": ["node_modules", "**/*.spec.ts"]
}
```

Here's what each setting does:

- `target`: Specifies the ECMAScript version that the code should be compiled to. Node.js 12 supports ES2019, so we set the target to `es2019`.
- `module`: Specifies the module system used in the output code. Node.js uses CommonJS, so we set the module to `commonjs`.
- `lib`: Specifies the library files that should be included in the compilation process. We set it to `es2019` to include all the features supported by Node.js 12.
- `esModuleInterop`: Enables interoperability between CommonJS and ES6 modules.
- `strict`: Enables strict type checking.
- `moduleResolution`: Specifies how modules should be resolved. We set it to `node` to use Node.js's module resolution algorithm.
- `resolveJsonModule`: Enables importing JSON files as modules.
- `declaration`: Specifies whether to generate declaration files (.d.ts) for the compiled code. We set it to `false` to avoid generating declaration files.
- `outDir`: Specifies the output directory for the compiled code.
- `sourceMap`: Generates source maps for the compiled code to enable debugging.

The `include` and `exclude` settings specify which files should be included or excluded from the compilation process. In this example, we include all files in the `src` directory and exclude any files with the `.spec.ts` extension and the `node_modules` directory.