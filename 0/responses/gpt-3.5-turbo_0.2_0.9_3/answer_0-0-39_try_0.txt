Yes, you can achieve this by using refs in React. Here's how you can modify your code to achieve the desired functionality:

```
import React, { Component } from "react";
import ReactDOM from "react-dom";

class CustomForm extends Component {
  handleSubmit = (event) => {
    event.preventDefault();
    alert('Form submitted!');
  }

  render() {
    return (
      <form onSubmit={this.handleSubmit}>
        <button type='submit'>Inside Custom</button>
      </form>
    );
  }
}

class App extends Component {
  customFormRef = React.createRef();

  handleSubmit = () => {
    this.customFormRef.current.handleSubmit();
  }

  render() {
    return (
      <div>
        <CustomForm ref={this.customFormRef} />
        <button onClick={this.handleSubmit}>In Root</button>
      </div>
    );
  }
}

const rootElement = document.getElementById("root");
ReactDOM.render(<App />, rootElement);
```

In the `CustomForm` component, we have defined a `handleSubmit` method that prevents the default form submission behavior and shows an alert message.

In the `App` component, we have created a `customFormRef` using `React.createRef()`. We have also defined a `handleSubmit` method that calls the `handleSubmit` method of the `CustomForm` component using the `customFormRef`.

We have passed the `customFormRef` to the `CustomForm` component using the `ref` prop. Finally, we have added an `onClick` event handler to the 'In Root' button that calls the `handleSubmit` method of the `App` component.

Now, when you click the 'In Root' button, it will call the `handleSubmit` method of the `App` component, which in turn will call the `handleSubmit` method of the `CustomForm` component, resulting in the form submission.