You can use the Clipboard API to copy text to the clipboard. Here's the updated `copyText` method:

```
copyText() {
  const textField = document.createElement('textarea');
  textField.innerText = this.text1;
  document.body.appendChild(textField);
  textField.select();
  document.execCommand('copy');
  textField.remove();
}
```

This method creates a temporary `textarea` element, sets its value to the text you want to copy, adds it to the document, selects its contents, copies the selection to the clipboard using `document.execCommand('copy')`, and finally removes the temporary element from the document.

Note that this method uses the `document.execCommand` method, which is deprecated and may not work in some browsers. An alternative approach is to use the newer Clipboard API, which is more secure and reliable. Here's an example of how to use the Clipboard API:

```
copyText() {
  navigator.clipboard.writeText(this.text1)
    .then(() => {
      console.log('Text copied to clipboard');
    })
    .catch((error) => {
      console.error('Could not copy text: ', error);
    });
}
```

This method uses the `navigator.clipboard.writeText` method to write the text to the clipboard. This method returns a promise that resolves when the text has been successfully copied, and rejects if there was an error.