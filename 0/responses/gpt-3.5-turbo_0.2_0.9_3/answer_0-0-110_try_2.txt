Yes, there is a React hook equivalent to `componentDidCatch` called `useErrorBoundary`. You can use it to create an error boundary component as a function component.

Here's an example of how you can use `useErrorBoundary` to create your `CatchError` component:

```
import { useErrorBoundary } from 'react-error-boundary'

export function CatchError({ children, log }) {
  const [hasError, setHasError] = useState(false)

  const onError = useCallback((error, info) => {
    log({ error, info })
    setHasError(true)
  }, [log])

  const [ErrorBoundary, resetErrorBoundary] = useErrorBoundary(onError)

  const child = typeof children === "function"
    ? children({ error: hasError })
    : children

  return hasError ? (
    <ErrorBoundary onReset={resetErrorBoundary}>
      {child}
    </ErrorBoundary>
  ) : (
    child
  )
}
```

In this example, `useErrorBoundary` returns an `ErrorBoundary` component that you can use to wrap your `children` and catch any errors that occur within them. The `onError` callback function is called when an error is caught, and it updates the state and logs the error. The `onReset` prop is passed to the `ErrorBoundary` component to allow resetting the error state.

Note that you need to wrap the `children` in the `ErrorBoundary` component only when an error has occurred. Otherwise, you can just render the `children` as is.