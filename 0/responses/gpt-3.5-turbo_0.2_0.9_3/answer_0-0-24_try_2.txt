It looks like you have tried a few different approaches to resolve the issue with absolute imports in your React app, but none of them have worked so far. Here are a few suggestions that you can try:

1. Update your webpack configuration: You mentioned that you have a `webpack.config.js` file in your project. You can try updating this file to include the `resolve.alias` configuration. Here's an example:

```
const path = require('path');

module.exports = {
  // ...
  resolve: {
    alias: {
      client: path.resolve(__dirname, 'assets/client/'),
    },
  },
};
```

This should allow you to use absolute imports like `import MyComponent from 'client/components/MyComponent'`.

2. Use `tsconfig-paths-webpack-plugin`: This is a plugin that allows you to use the `baseUrl` and `paths` configuration from your `tsconfig.json` file in your webpack configuration. Here's an example:

```
const TsconfigPathsPlugin = require('tsconfig-paths-webpack-plugin');

module.exports = {
  // ...
  resolve: {
    plugins: [new TsconfigPathsPlugin()],
  },
};
```

This should allow you to use absolute imports like `import MyComponent from 'client/components/MyComponent'` without any additional configuration.

3. Move your `client` directory to the root of your project: It's possible that the unconventional project structure is causing issues with resolving your imports. You can try moving the `client` directory to the root of your project and updating your configuration accordingly.

I hope one of these suggestions helps you resolve the issue with absolute imports in your React app. Let me know if you have any questions or if there's anything else I can help with!