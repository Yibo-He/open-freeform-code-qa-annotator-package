To connect to Heroku Redis using TLS on Node, you should use the REDIS_TLS_URL environment variable instead of REDIS_URL. Here's an example code snippet using node_redis v3:

```javascript
const redis = require('redis');
const url = require('url');

const redisUrl = url.parse(process.env.REDIS_TLS_URL);

const client = redis.createClient(redisUrl.port, redisUrl.hostname, {
  tls: {
    rejectUnauthorized: false
  }
});

client.auth(redisUrl.auth.split(":")[1]);

client.on('connect', () => {
  console.log('Connected to Redis');
});

client.on('error', (err) => {
  console.error('Redis error:', err);
});
```

Note that the `rejectUnauthorized` option is set to `false` in the `tls` object. This is because Heroku Redis uses a self-signed certificate, so the certificate cannot be verified by a trusted certificate authority. Setting `rejectUnauthorized` to `false` disables certificate verification and allows the connection to be established.

Also, make sure to replace `console.log` and `console.error` with your own logging functions.