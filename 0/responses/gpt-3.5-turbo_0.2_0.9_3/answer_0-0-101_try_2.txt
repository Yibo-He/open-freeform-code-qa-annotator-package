To capture a screenshot of the entire screen, you can use the `desktopCapturer` module in Electron. Here's an example of how to do it:

```
const { desktopCapturer } = require('electron');

desktopCapturer.getSources({ types: ['screen'] }).then(async sources => {
  for (const source of sources) {
    try {
      const stream = await navigator.mediaDevices.getUserMedia({
        audio: false,
        video: {
          mandatory: {
            chromeMediaSource: 'desktop',
            chromeMediaSourceId: source.id,
            minWidth: 1280,
            maxWidth: 1280,
            minHeight: 720,
            maxHeight: 720
          }
        }
      });
      const videoTrack = stream.getVideoTracks()[0];
      const imageCapture = new ImageCapture(videoTrack);
      const bitmap = await imageCapture.grabFrame();
      const canvas = document.createElement('canvas');
      canvas.width = bitmap.width;
      canvas.height = bitmap.height;
      const ctx = canvas.getContext('2d');
      ctx.drawImage(bitmap, 0, 0);
      const dataUrl = canvas.toDataURL();
      const base64Data = dataUrl.replace(/^data:image\/png;base64,/, '');
      const buffer = Buffer.from(base64Data, 'base64');
      // send buffer to server
    } catch (e) {
      console.error(e);
    }
  }
});
```

This code captures a screenshot of the entire screen and converts it to a base64-encoded PNG image. You can then convert this to a buffer and send it to your Python server.

To draw things on the overlay, you can use the `canvas` element and the `getContext()` method to get a 2D rendering context. You can then use the various drawing methods to draw shapes, text, images, etc. Here's an example:

```
const canvas = document.createElement('canvas');
canvas.width = window.innerWidth;
canvas.height = window.innerHeight;
canvas.style.position = 'absolute';
canvas.style.top = '0';
canvas.style.left = '0';
canvas.style.pointerEvents = 'none';
document.body.appendChild(canvas);

const ctx = canvas.getContext('2d');
ctx.fillStyle = 'rgba(255, 0, 0, 0.5)';
ctx.fillRect(0, 0, canvas.width, canvas.height);
ctx.font = '48px serif';
ctx.fillStyle = 'white';
ctx.fillText('Hello, world!', 50, 100);
```

This code creates a `canvas` element that covers the entire screen and draws a semi-transparent red rectangle and some white text on it. The `pointerEvents` style is set to `none` so that mouse events pass through the overlay to the underlying window.