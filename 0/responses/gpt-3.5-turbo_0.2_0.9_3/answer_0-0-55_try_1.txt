The issue with your code is that you are creating a new `myInterval` variable every time the component renders. This means that when you try to clear the interval using `clearInterval(myInterval)`, it is not referring to the correct interval ID.

To fix this, you can use the `useRef` hook to create a mutable reference to the `myInterval` variable. This way, the same variable will be used across renders and you can clear the interval using `clearInterval(myInterval.current)`.

Here's the updated code with the `useRef` hook and the reset functionality implemented:

```
import React, { useState, useEffect, useRef } from "react";

export default function Counter() {
  const [counter, setCounter] = useState(0);
  const [isRunning, setIsRunning] = useState(false);
  const intervalRef = useRef(null);

  function startCounter() {
    setIsRunning(true);
  }

  function pauseCounter() {
    setIsRunning(false);
  }

  function resetCounter() {
    setIsRunning(false);
    setCounter(0);
  }

  useEffect(() => {
    if (isRunning) {
      intervalRef.current = setInterval(() => {
        setCounter((counter) => counter + 1);
      }, 1000);
    } else {
      clearInterval(intervalRef.current);
    }
    return () => clearInterval(intervalRef.current);
  }, [isRunning]);

  return (
    <div>
      <p>{counter}</p>
      {isRunning ? (
        <button onClick={pauseCounter}>Pause</button>
      ) : (
        <button onClick={startCounter}>Start</button>
      )}
      <button onClick={resetCounter}>Reset</button>
    </div>
  );
}
```

Here's the updated CodeSandbox link: https://codesandbox.io/s/counter-with-reset-5xso6y-forked-9d8jy?file=/src/Counter.js