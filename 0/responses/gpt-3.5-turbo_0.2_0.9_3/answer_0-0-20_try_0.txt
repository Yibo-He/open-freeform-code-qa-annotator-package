The issue with the current implementation is that a new styled component is created every time the `Tab` component is rendered. This can lead to performance issues as it creates unnecessary re-renders.

To fix this, you can move the styled component outside the `Tab` component and pass the required props as arguments to the styled component. Here's an example:

```
import React from 'react'
import styled from 'styled-components'

const TabWrapper = styled.li`
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 100px;
  margin: 1px;
  font-size: 3em;
  color: ${props => (props.isSelected ? `white` : `black`)};
  background-color: ${props => (props.isSelected ? `black` : `#C4C4C4`)};
  cursor: ${props => (props.isSelected ? 'default' : `pointer`)};
`

const Tab = ({ onClick, isSelected, children }) => {
  return <TabWrapper isSelected={isSelected} onClick={onClick}>{children}</TabWrapper>
}

export default Tab
```

In this implementation, the `TabWrapper` styled component is defined outside the `Tab` component and the required props are passed as arguments to the styled component. This ensures that the styled component is only created once and the required props are used to create a dynamic style.