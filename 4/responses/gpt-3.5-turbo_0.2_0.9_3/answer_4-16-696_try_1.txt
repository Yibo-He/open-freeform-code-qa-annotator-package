The issue with your command is that the `sed` command is not properly escaping the `?` character. In regular expressions, `?` is a special character that means "match zero or one of the preceding character". To match a literal `?` character, you need to escape it with a backslash.

Here's the corrected command:
```
find . -type f -name '*\?*' -exec sh -c 'mv "$1" "$(echo "$1" | sed "s/\?.*//g")"' sh {} \;
```

In this command, we're using `sh -c` to execute a shell command that renames the file. The `sed` command is now properly escaping the `?` character with a backslash.

Also note that we're passing `sh` as the first argument to `sh -c`, which sets `$0` to `sh` and makes `{}` the second argument (`$1`). This is necessary because some versions of `find` require a command argument after the `-exec` option.

I hope this helps!