One way to implement a "scroll-to" feature in a SwiftUI `List` without using `UIViewRepresentable/UIViewControllerRepresentable` is to use the `ScrollViewReader` and `GeometryReader` views. 

Here's an example implementation:

```
struct ContentView: View {
    @State private var scrollToIndex: Int? = nil
    
    var body: some View {
        VStack {
            Button("Scroll to Index 10") {
                self.scrollToIndex = 10
            }
            List(0..<100) { index in
                Text("Row \(index)")
                    .id(index)
            }
            .onAppear {
                if let scrollToIndex = self.scrollToIndex {
                    DispatchQueue.main.async {
                        withAnimation {
                            self.scrollTo(index: scrollToIndex)
                        }
                    }
                }
            }
            .onChange(of: scrollToIndex) { newIndex in
                if let newIndex = newIndex {
                    withAnimation {
                        self.scrollTo(index: newIndex)
                    }
                }
            }
        }
    }
    
    private func scrollTo(index: Int) {
        withAnimation {
            ScrollViewReader { scrollView in
                scrollView.scrollTo(index, anchor: .top)
            }
        }
    }
}
```

In this implementation, we use a `Button` to trigger the scroll to a specific index in the `List`. We store the index to scroll to in a `@State` variable called `scrollToIndex`.

We then use the `List`'s `onAppear` and `onChange` modifiers to trigger the scroll to the specified index when the view appears or when the `scrollToIndex` value changes.

The `scrollTo` function uses the `ScrollViewReader` view to scroll to the specified index. We wrap the `ScrollViewReader` in a `withAnimation` block to animate the scroll.

Note that this implementation may not be as performant as using `UIViewRepresentable/UIViewControllerRepresentable`, especially for large lists, but it provides a simple and lightweight solution that doesn't require wrapping the `List` in a `UITableView`.