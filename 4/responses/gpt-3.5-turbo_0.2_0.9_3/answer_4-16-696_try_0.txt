The issue with your command is that the `sed` command is not properly escaping the `?` character. In regular expressions, `?` is a special character that means "match zero or one of the preceding character". To match a literal `?`, you need to escape it with a backslash.

Here's the corrected command:
```
find . -type f -name '*\?*' -exec sh -c 'mv "$1" "$(echo "$1" | sed "s/\?.*//g")"' _ {} \;
```

In this command, we're using `sh -c` to execute a shell command that performs the `mv` operation. The `sed` command now properly escapes the `?` character with a backslash.

Also note that we're using `_` as a placeholder for the `$0` argument, which is normally used to pass the name of the shell script being executed. Since we're not using a script file, we don't need to pass any value for `$0`.

This command should now properly rename all files with a `?` character in their name.