To achieve this behavior, you can use the `setCurrentItem()` method of the `ViewPager2` class to programmatically set the current item to the desired fragment when a tab is clicked in the `TabLayout`. Here's an example:

1. First, disable user input for the `ViewPager2` by setting its `isUserInputEnabled` property to `false`:

```kotlin
viewPager.isUserInputEnabled = false
```

2. Set up the `TabLayout` to listen for tab clicks and update the `ViewPager2` accordingly:

```kotlin
tabLayout.addOnTabSelectedListener(object : TabLayout.OnTabSelectedListener {
    override fun onTabSelected(tab: TabLayout.Tab?) {
        tab?.let {
            viewPager.setCurrentItem(it.position, false)
        }
    }

    override fun onTabUnselected(tab: TabLayout.Tab?) {
        // Not needed for this example
    }

    override fun onTabReselected(tab: TabLayout.Tab?) {
        // Not needed for this example
    }
})
```

3. Finally, in your `FragmentStateAdapter`, override the `createFragment()` method to return the appropriate fragment based on the position:

```kotlin
override fun createFragment(position: Int): Fragment {
    return when (position) {
        0 -> FirstFragment()
        1 -> SecondFragment()
        2 -> ThirdFragment()
        else -> throw IllegalArgumentException("Invalid position: $position")
    }
}
```

With these changes, clicking on a tab in the `TabLayout` will immediately show the corresponding fragment without any animation or swiping.