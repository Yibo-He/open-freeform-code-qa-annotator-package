Yes, you can get the current scroll position of a `ScrollView` using the `GeometryReader` and `ScrollViewProxy` together. Here's an example:

```swift
struct ContentView: View {
    @State private var scrollOffset: CGFloat = 0
    
    var body: some View {
        GeometryReader { geometry in
            ScrollView {
                VStack(spacing: 20) {
                    ForEach(0..<50) { index in
                        Text("Item \(index)")
                            .frame(width: geometry.size.width, height: 50)
                    }
                }
                .background(GeometryReader { scrollViewGeometry -> Color in
                    let offset = scrollViewGeometry.frame(in: .named("scrollView")).minY
                    DispatchQueue.main.async {
                        self.scrollOffset = offset
                    }
                    return Color.clear
                })
                .onAppear {
                    // Scroll to a specific position
                    scrollViewProxy.scrollTo(25)
                }
            }
            .coordinateSpace(name: "scrollView")
        }
        .overlay(Text("Current scroll offset: \(scrollOffset)"))
    }
    
    private var scrollViewProxy: ScrollViewProxy {
        ScrollViewProxy()
    }
}
```

In this example, we use a `GeometryReader` to get the frame of the `ScrollView` and its content. We then use the `background` modifier to create a transparent `Color` that fills the entire content area of the `ScrollView`. Inside the `background` closure, we use another `GeometryReader` to get the frame of the `ScrollView` again, but this time we use the `frame(in:)` method to get the frame relative to the coordinate space named "scrollView". We then update the `scrollOffset` state variable with the `minY` value of the `ScrollView`'s frame.

Finally, we use the `overlay` modifier to display the current scroll offset on top of the `ScrollView`.

Note that we also use a `ScrollViewProxy` to be able to call the `scrollTo` method in the `onAppear` closure.