To check if a key exists and is not empty, you can use the `length` function in jq. Here's an example:

```
if $(cat $my_json | jq 'has("key1") and (.key1 | length > 0)'); then
  values=$(jq -r ".key1" "$my_json")

  for item in $values
  do
    echo "Item : $item"
  done
fi
```

This will only enter the if statement if "key1" exists and is not empty. The `length` function returns the number of elements in an array or the number of characters in a string, so if it returns 0, the array or string is empty.

To achieve the output you want, you can use the `join` function to concatenate the array elements with a separator, and then use the `printf` function to format the output as a list. Here's an example:

```
if $(cat $my_json | jq 'has("key2") and (.key2 | length > 0)'); then
  values=$(jq -r ".key2 | join(\"\\n\")" "$my_json")

  printf "key2:\n"
  printf -- "- %s\n" $values
fi
```

This will only enter the if statement if "key2" exists and is not empty. The `join` function concatenates the array elements with a newline separator, and the `printf` function formats the output as a list with each element preceded by a hyphen.