You can use the `date` command to convert the start and end timestamps to seconds since the epoch, and then subtract them to get the total number of seconds. You can then use some simple arithmetic to convert this to the desired format. Here's an example script that does this:

```
#!/bin/bash

# Get start and end timestamps
timestamps=$(sudo journalctl | grep "Logs begin at" | awk '{print $6" "$7" "$12" "$13}')
start=$(echo $timestamps | awk '{print $1" "$2}')
end=$(echo $timestamps | awk '{print $3" "$4}')

# Convert timestamps to seconds since epoch
start_seconds=$(date -d "$start" +%s)
end_seconds=$(date -d "$end" +%s)

# Calculate difference in seconds
diff_seconds=$((end_seconds - start_seconds))

# Calculate years, months, days, hours, minutes, and seconds
years=$((diff_seconds / 31536000))
diff_seconds=$((diff_seconds % 31536000))
months=$((diff_seconds / 2592000))
diff_seconds=$((diff_seconds % 2592000))
days=$((diff_seconds / 86400))
diff_seconds=$((diff_seconds % 86400))
hours=$((diff_seconds / 3600))
diff_seconds=$((diff_seconds % 3600))
minutes=$((diff_seconds / 60))
seconds=$((diff_seconds % 60))

# Print result
echo "$years year(s), $months month(s), $days day(s), $(printf "%02d:%02d:%02d" $hours $minutes $seconds)"
```

This script first gets the start and end timestamps using the command you provided. It then uses the `date` command to convert these timestamps to seconds since the epoch. It calculates the difference in seconds between the two timestamps, and then uses some simple arithmetic to convert this to years, months, days, hours, minutes, and seconds. Finally, it prints the result in the desired format.