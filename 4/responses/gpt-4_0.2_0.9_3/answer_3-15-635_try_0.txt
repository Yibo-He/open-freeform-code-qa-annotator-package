You're right, the manual process you described would be very time-consuming. A more efficient approach would be to use a script to automate the conversion process. Here's a general idea of how you could do this using Python and a couple of libraries:

1. Use `pandas` to read the Excel file and get the descriptions.
2. Use `html` or `BeautifulSoup` to convert the descriptions to HTML.
3. Save the converted descriptions back to the Excel file using `pandas`.

Here's a simple example of how you could do this:

```python
import pandas as pd
from bs4 import BeautifulSoup

# Read the Excel file
df = pd.read_excel('products.xlsx')

# Convert the descriptions to HTML
df['Description'] = df['Description'].apply(lambda x: str(BeautifulSoup(x, 'html.parser')))

# Save the converted descriptions back to the Excel file
df.to_excel('products_converted.xlsx', index=False)
```

This script assumes that the descriptions are in a column named 'Description' in the Excel file. You'll need to adjust the script to match your actual data.

Please note that this script will convert the descriptions to HTML, but it won't preserve any formatting (like bold or italic text) that was applied in Excel. If you need to preserve the formatting, you'll need a more complex solution. One option could be to use a library like `python-docx` to convert the Excel data to Word, then use `python-docx` again to convert the Word data to HTML. However, this would be a much more complex script and may not be worth the effort if you don't need to preserve the formatting.