As of now, SwiftUI does not provide a built-in way to get the current scroll position of a `ScrollView`. The `ScrollViewReader` and `ScrollViewProxy` indeed only provide the `scrollTo` method, which allows you to scroll to a specific view within the `ScrollView`.

However, you can use `GeometryReader` to get the current scroll position. Here's a basic example:

```swift
struct ContentView: View {
    @State private var scrollOffset: CGFloat = 0

    var body: some View {
        ScrollView {
            GeometryReader { geometry in
                Color.clear.preference(key: ViewOffsetKey.self, value: geometry.frame(in: .named("scrollView")).minY)
            }
            .frame(height: 0)

            // Your ScrollView content here
        }
        .coordinateSpace(name: "scrollView")
        .onPreferenceChange(ViewOffsetKey.self) { offset in
            self.scrollOffset = offset
        }
    }
}

struct ViewOffsetKey: PreferenceKey {
    typealias Value = CGFloat
    static var defaultValue = CGFloat.zero
    static func reduce(value: inout Value, nextValue: () -> Value) {
        value += nextValue()
    }
}
```

In this example, we use `GeometryReader` to get the `minY` of the frame, which gives us the current scroll position. We then use `PreferenceKey` to pass this value up to the `ScrollView`. The `scrollOffset` state variable will hold the current scroll position.

Please note that this is a workaround and may not be perfect. It would be great if future versions of SwiftUI provide a more straightforward way to get the current scroll position.