You can use the `date` command in Linux to convert the timestamps to seconds since the Unix epoch (1970-01-01 00:00:00 UTC), subtract them to get the difference, and then convert the difference back to a human-readable format. Here is a bash script that does this:

```bash
#!/bin/bash

# Get the start and end times
output=$(sudo journalctl | grep "Logs begin at" | awk '{print $6" "$7" "$12" "$13}')
start_time=$(echo $output | awk '{print $1" "$2}')
end_time=$(echo $output | awk '{print $3" "$4}')

# Convert the times to seconds since the Unix epoch
start_seconds=$(date --date="$start_time" +%s)
end_seconds=$(date --date="$end_time" +%s)

# Calculate the difference
diff_seconds=$((end_seconds - start_seconds))

# Convert the difference back to a human-readable format
diff_days=$((diff_seconds / 86400))
diff_seconds=$((diff_seconds % 86400))
diff_hours=$((diff_seconds / 3600))
diff_seconds=$((diff_seconds % 3600))
diff_minutes=$((diff_seconds / 60))
diff_seconds=$((diff_seconds % 60))

echo "0 year(s), 0 month(s), $diff_days day(s), $diff_hours:$diff_minutes:$diff_seconds"
```

This script assumes that the start and end times are in the local time zone. If they are in UTC, you should use `date --utc --date="$start_time" +%s` and `date --utc --date="$end_time" +%s` to convert them to seconds.

Also, this script does not calculate the number of years and months between the start and end times. If you need this, you will have to add some additional logic, because the number of days in a year and a month can vary.