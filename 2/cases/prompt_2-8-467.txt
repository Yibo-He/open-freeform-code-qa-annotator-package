Struct field tag `name` not compatible with reflect.StructTag.Get: bad syntax for struct tag pair

I read [this](https://stackoverflow.com/q/59959839/2441637), but it is different than my case, I've the below code:
```
package main

import (
    "bytes"
    "fmt"
    "reflect"
    "strconv"
    "strings"
)

type User struct {
    Name string `name`
    Age  int64  `age`
}

func main() {
    var u User = User{"bob", 10}

    res, err := JSONEncode(u)
    if err != nil {
        panic(err)
    }
    fmt.Println(string(res))

}

func JSONEncode(v interface{}) ([]byte, error) {
    refObjVal := reflect.ValueOf(v)
    refObjTyp := reflect.TypeOf(v)
    buf := bytes.Buffer{}
    if refObjVal.Kind() != reflect.Struct {
        return buf.Bytes(), fmt.Errorf(
            "val of kind %s is not supported",
            refObjVal.Kind(),
        )
    }
    buf.WriteString("{")
    pairs := []string{}
    for i := 0; i < refObjVal.NumField(); i++ {
        structFieldRefObj := refObjVal.Field(i)
        structFieldRefObjTyp := refObjTyp.Field(i)

        switch structFieldRefObj.Kind() {
        case reflect.String:
            strVal := structFieldRefObj.Interface().(string)
            pairs = append(pairs, `"`+string(structFieldRefObjTyp.Tag)+`":"`+strVal+`"`)
        case reflect.Int64:
            intVal := structFieldRefObj.Interface().(int64)
            pairs = append(pairs, `"`+string(structFieldRefObjTyp.Tag)+`":`+strconv.FormatInt(intVal, 10))
        default:
            return buf.Bytes(), fmt.Errorf(
                "struct field with name %s and kind %s is not supprted",
                structFieldRefObjTyp.Name,
                structFieldRefObj.Kind(),
            )
        }
    }

    buf.WriteString(strings.Join(pairs, ","))
    buf.WriteString("}")

    return buf.Bytes(), nil
}
```

It works perfectly, and give output as:
```
{"name":"bob","age":10}
```

But as VS code, it gives me the below problems:
[](https://i.stack.imgur.com/G8okK.png)
What could be the issue?
