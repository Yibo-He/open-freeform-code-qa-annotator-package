Inject generic interface in .NET Core

I want to inject this interface to my controllers:
```
public interface IDatabaseService<T>
{
    IEnumerable<T> GetList();
    ...
}
```

I want to use generic, because in my `WebApi` project i have controllers like `ProjectController`, `TaskController` etc and i want to use generic interface to each of type (for example, `IDatabaseService<Project>`, `IdatabaseService<Task>` etc).
Class, that will be injected to controller will look like this:
```
public class ProjectService : IDatabaseService<Project>
{
    private readonly DbContext context;

    public ProjectService(DbContext context)
    {
        this.context = context;
    }

    public IEnumerable<Project> GetList() { }
    ...
}
```

But when I try to ineject in my `Startup.cs`:
```
services.AddScoped<IDatabaseService<T>>();
```

I need to pass `T` type.
My question is, how to make injection generic and how inject it properly in controller? For example:
```
public class ProjectController : ControllerBase
{
    private readonly ProjectService projectService;

    public ProjectController (IDatabaseService<Project> projectService)
    {
        this.projectService = projectService;
    }
}
```

If it will work? And is it good practice to make generic interface to inject into controllers? If no, how to do it better?
