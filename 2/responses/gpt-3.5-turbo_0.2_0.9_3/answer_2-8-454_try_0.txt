The approach you have taken is a valid one and is commonly used when working with Go modules. It allows you to work on multiple modules within the same repository and import them into other modules or a root `main.go` file.

The `replace` directive in the root `go.mod` file is used to replace the remote import path with a local one. This is useful when you are working on a local package that is not yet published to a remote repository. It is also useful when you want to make changes to a package that is published to a remote repository, but you want to test those changes locally before pushing them to the remote repository.

Regarding the option of making every module its own repository, this is also a valid approach. It allows you to version each module independently and makes it easier to manage dependencies between modules. However, it can also add complexity to your project and may not be necessary if your modules are tightly coupled and need to be developed together.

In summary, the approach you have taken is a good one for managing multiple modules within the same repository. However, if your modules are more complex and need to be versioned independently, then creating separate repositories for each module may be a better approach.