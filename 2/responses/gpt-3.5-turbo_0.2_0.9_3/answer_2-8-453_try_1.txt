The `err113` linter is suggesting that you should not define dynamic errors using `errors.New()` or `fmt.Errorf()` directly in your code. Instead, you should use wrapped static errors.

Here's an example of how you can use wrapped static errors:

```go
package main

import (
    "errors"
    "fmt"
)

var (
    ErrRepo = errors.New("repository error")
    ErrDB   = errors.New("database error")
)

func main() {
    err := doSomething()
    if errors.Is(err, ErrRepo) {
        fmt.Println("repository error occurred")
    } else if errors.Is(err, ErrDB) {
        fmt.Println("database error occurred")
    } else {
        fmt.Println("unknown error occurred")
    }
}

func doSomething() error {
    // simulate a repository error
    return fmt.Errorf("failed to save data: %w", ErrRepo)
}
```

In this example, we define two static errors `ErrRepo` and `ErrDB` at the package level. These errors can be reused throughout the codebase.

In the `doSomething()` function, we simulate a repository error by wrapping the `ErrRepo` error using `fmt.Errorf()`. This creates a new error that includes the original error as a wrapped error.

In the `main()` function, we check the error returned by `doSomething()` using `errors.Is()` to see if it matches one of our predefined errors. If it does, we can handle the error appropriately.

By using wrapped static errors, we can avoid defining dynamic errors using `errors.New()` or `fmt.Errorf()` directly in our code, which can help improve code quality and maintainability.