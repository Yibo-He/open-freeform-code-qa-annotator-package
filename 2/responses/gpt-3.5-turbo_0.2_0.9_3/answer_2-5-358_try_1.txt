It's great that you are exploring different options for performing background tasks in your Android project. Here are some suggestions that might help you:

1. AsyncTask: As you mentioned, this class is easy to use and has a built-in method to return the result directly to the UI thread. However, it is also deprecated in Android 11 and may not be the best option for long-running tasks.

2. ThreadPoolExecutor: This class provides a way to execute tasks in a background thread, but as you mentioned, it requires you to manually handle the communication with the UI thread. One way to make this more elegant is to create a custom class that extends `Handler` and handles the communication with the UI thread. You can then use this custom class to post `Runnable` objects from your background thread.

3. Coroutines: While you mentioned that you cannot use Kotlin coroutines in your legacy project, it's worth noting that coroutines provide a very elegant way to perform background tasks in Android. If you are interested in exploring this further, you could consider using a library like kotlinx.coroutines-java8, which provides a Java 8-compatible version of Kotlin coroutines.

4. LiveData: As you mentioned, using LiveData and the MVVM pattern can help solve some of the issues with communicating between background threads and the UI thread. While it may not be feasible to refactor your entire project to use this pattern, you could consider using LiveData in specific parts of your code where it makes sense.

Overall, there is no one-size-fits-all solution for performing background tasks in Android, and it's important to choose the approach that works best for your specific use case.