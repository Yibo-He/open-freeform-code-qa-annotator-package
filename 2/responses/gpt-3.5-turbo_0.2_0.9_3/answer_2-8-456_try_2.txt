One solution to this problem is to create a new interface that embeds the `Card` interface and adds the `String()` method. This new interface can be used wherever you need to call the `String()` method on a `Card` object. Here's an example:

```
type Stringer interface {
    Card
    String() string
}

func NewCard(num int) Stringer {
    newCard := card{
        cardNum: num,
        face:    faces[num%len(faces)],
        suit:    suits[num/len(faces)],
    }

    return &newCard
}

func TestString(t *testing.T) {
    card := NewCard(0)
    assert.EqualValues(t, "AceHearts ", card.String(), " newly created card's string repr should be 'AceHearts '")
}
```

In this example, we've created a new interface called `Stringer` that embeds the `Card` interface and adds the `String()` method. We've also updated the `NewCard()` function to return a `Stringer` instead of a `Card`. Now, when we create a new card and call the `String()` method on it, it will work as expected.

By creating a new interface that embeds the `Card` interface, we avoid duplicating the `GetFace()` and `GetSuit()` methods in multiple interfaces. This approach also allows us to add additional methods to the `Stringer` interface if needed in the future.