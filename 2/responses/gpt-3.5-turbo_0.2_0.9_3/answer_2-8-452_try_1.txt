Yes, in Go, you can use slices instead of arrays to achieve this functionality. Slices are similar to arrays, but they are dynamic and can grow or shrink as needed. 

To create a slice, you can use the `make` function and specify the type of the slice and its initial length and capacity. For example, to create an empty slice of integers, you can use the following code:

```
mySlice := make([]int, 0)
```

You can then append elements to the slice using the `append` function. For example:

```
mySlice = append(mySlice, 1)
mySlice = append(mySlice, 2)
mySlice = append(mySlice, 3)
```

This will add the integers 1, 2, and 3 to the end of the slice. 

You can also create a slice from an existing array by using the `[:]` syntax. For example:

```
myArray := [3]int{1, 2, 3}
mySlice := myArray[:]
```

This will create a slice that contains all the elements of the array. 

There are also many third-party libraries available for Go that provide additional functionality for working with slices, such as resizing, sorting, and filtering. Some popular ones include `golang.org/x/exp/mmap`, `github.com/golang-collections/collections`, and `github.com/cheekybits/genny`.