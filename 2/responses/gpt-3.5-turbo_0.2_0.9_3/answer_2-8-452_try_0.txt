Yes, in Go, you can use slices instead of arrays to achieve this functionality. Slices are similar to arrays but they are dynamic in size and can be resized during runtime. You can create a slice without specifying its size and then append elements to it using the built-in `append` function.

Here's an example:

```go
package main

import "fmt"

func main() {
    // create an empty slice
    var numbers []int

    // append elements to the slice
    numbers = append(numbers, 1)
    numbers = append(numbers, 2, 3, 4)

    fmt.Println(numbers) // [1 2 3 4]
}
```

In this example, we create an empty slice `numbers` and then append elements to it using the `append` function. The `append` function takes a slice as its first argument and one or more elements to append to the slice as its subsequent arguments. It returns a new slice with the appended elements.

You can also create a slice with initial values using a slice literal:

```go
package main

import "fmt"

func main() {
    // create a slice with initial values
    numbers := []int{1, 2, 3}

    // append elements to the slice
    numbers = append(numbers, 4, 5)

    fmt.Println(numbers) // [1 2 3 4 5]
}
```

In this example, we create a slice `numbers` with initial values using a slice literal and then append elements to it using the `append` function.

I hope this helps! Let me know if you have any further questions.