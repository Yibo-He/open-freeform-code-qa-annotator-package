In JUnit 5, you can use the `@CsvSource` annotation to read test data from a CSV file. Here's an example:

```
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.CsvSource;

public class Test {

    @ParameterizedTest
    @CsvSource({
        "a, 0, 0.0",
        "abcde, 1, 1.01",
        "a-b-c, 999, 999.0"
    })
    public void shouldCalculateDiscount(String column1, long column2, double column3) {
        assertEquals(5, column1.length());
        assertEquals(column3, column2, 0.0001);
    }
}
```

In this example, the `@CsvSource` annotation is used to provide the test data. Each line in the CSV file represents a test case, and the values in each column are passed as arguments to the test method. The `assertEquals` statements in the test method are used to verify that the test data is correct.

Note that you can also use the `@CsvFileSource` annotation to read test data from a CSV file on the file system. Here's an example:

```
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.CsvFileSource;

public class Test {

    @ParameterizedTest
    @CsvFileSource(resources = "/test-data.csv")
    public void shouldCalculateDiscount(String column1, long column2, double column3) {
        assertEquals(5, column1.length());
        assertEquals(column3, column2, 0.0001);
    }
}
```

In this example, the `@CsvFileSource` annotation is used to read test data from a CSV file located at `/test-data.csv` on the classpath. The test method is the same as in the previous example.