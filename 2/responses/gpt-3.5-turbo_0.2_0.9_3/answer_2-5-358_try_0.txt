It's great that you have explored different options for performing background tasks in Android. As you have mentioned, `AsyncTask` is a simple and easy-to-use option, but it has been deprecated since Android 11. 

`ThreadPoolExecutor` is a good alternative, but as you have mentioned, it requires you to manually handle communication with the UI thread using `runOnUiThread()`. 

Since you are working with a legacy project and cannot use Kotlin coroutines, you can consider using Java coroutines. Java coroutines are not officially supported by Android, but there are some third-party libraries that you can use, such as Quasar or Fibers. 

Java coroutines allow you to write asynchronous code in a synchronous style, making it easier to read and maintain. They also handle communication with the UI thread automatically, so you don't have to worry about using `runOnUiThread()`. 

Another option you can consider is using RxJava. RxJava is a reactive programming library that allows you to write asynchronous and event-based code in a more concise and readable way. It also provides operators for handling threading and communication with the UI thread. 

Overall, there are many options available for performing background tasks in Android, and it's important to choose the one that best fits your project's needs and constraints.