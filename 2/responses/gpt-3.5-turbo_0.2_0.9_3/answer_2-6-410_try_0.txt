It seems like you have already made some good progress in optimizing your code by using `List`s instead of strings to store the path. Here are a few additional suggestions:

1. Use a sparse matrix

If your graph is sparse (i.e. it has many zero entries), you can use a sparse matrix data structure to reduce memory usage. A sparse matrix only stores the non-zero entries, which can be much more memory-efficient than a dense matrix. There are several libraries available in C# for working with sparse matrices, such as Math.NET Numerics and Extreme Optimization.

2. Use a compressed path representation

Instead of storing the entire path as a list of points, you can use a compressed representation that only stores the necessary information to reconstruct the path. For example, you could store the indices of the nodes along the path instead of their coordinates. This can significantly reduce memory usage, especially for long paths.

3. Use a streaming approach

If your graph is too large to fit into memory, you can use a streaming approach where you only load a portion of the graph into memory at a time. For example, you could divide the graph into smaller subgraphs and run the Floyd-Warshall algorithm on each subgraph separately. Then, you can combine the results to get the shortest paths for the entire graph. This approach requires more computation time, but it can handle graphs that are too large to fit into memory.

4. Use a different algorithm

If the Floyd-Warshall algorithm is still too memory-intensive, you can consider using a different algorithm that is more memory-efficient. For example, Dijkstra's algorithm or A* algorithm can be used to find the shortest path between two nodes in a graph, and they only require storing the shortest path to each node, rather than the shortest path between all pairs of nodes. However, these algorithms may not be suitable for finding the shortest path between all pairs of nodes in a graph.