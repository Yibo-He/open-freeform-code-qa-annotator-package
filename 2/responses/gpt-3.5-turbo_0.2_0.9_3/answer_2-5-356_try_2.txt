You can modify your existing comparator to compare the alphabetical order of the articles if their description length is the same. Here's an example implementation:

```
public List<Article> sortAsc() {
    removeNull();
    return articles.stream()
            .sorted(Comparator.comparingInt(Article::getDescriptionLength)
                    .thenComparing(Article::getDescription))
            .collect(Collectors.toList());
}

public class Article {
    private String description;

    public int getDescriptionLength() {
        return description.length();
    }

    public String getDescription() {
        return description;
    }

    // other methods and properties
}
```

In this implementation, we first sort the articles by their description length using `Comparator.comparingInt(Article::getDescriptionLength)`. If two articles have the same description length, we then compare their descriptions alphabetically using `thenComparing(Article::getDescription)`. 

Note that we added a `getDescriptionLength()` method to the `Article` class to make it easier to sort by description length.