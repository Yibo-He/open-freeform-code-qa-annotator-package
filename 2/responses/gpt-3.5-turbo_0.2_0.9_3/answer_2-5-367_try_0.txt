One possible solution is to use the `testOrderer` configuration in the Surefire plugin to specify a custom test order. You can create a custom test order that runs your slow test classes first, followed by the remaining tests in a random order. Here's an example configuration:

```xml
<build>
  <plugins>
    <plugin>
      <groupId>org.apache.maven.plugins</groupId>
      <artifactId>maven-surefire-plugin</artifactId>
      <version>3.0.0-M5</version>
      <configuration>
        <testOrderer implementation="org.junit.platform.engine.support.hierarchical.RandomizedTestOrderer">
          <properties>
            <property>
              <name>slowTestsFirst</name>
              <value>true</value>
            </property>
          </properties>
        </testOrderer>
      </configuration>
    </plugin>
  </plugins>
</build>
```

In this example, we're using the `RandomizedTestOrderer` from JUnit to randomize the order of the tests. We're also setting a custom property called `slowTestsFirst` to `true`. You can then use this property in your test classes to control the order of execution:

```java
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.MethodOrderer;

@TestMethodOrder(MethodOrderer.OrderAnnotation.class)
public class MySlowTest {

  @Test
  @Order(1)
  public void testSlow1() {
    // ...
  }

  @Test
  @Order(2)
  public void testSlow2() {
    // ...
  }

  // ...
}
```

In this example, we're using the `@Order` annotation to specify the order of execution for each test method. The `@TestMethodOrder` annotation is used to specify the order of execution for the entire test class. By setting the `@Order` value to 1 for our slow tests, they will be executed first. The remaining tests will be executed in a random order.

Note that this solution requires some manual configuration of the test classes, but it should allow you to run your slow tests first without renaming or moving them.