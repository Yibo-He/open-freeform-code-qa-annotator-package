The issue is that the second item in the `"edges"` array is an empty string, which cannot be converted to an `int`. To handle this, you can create a custom `JsonConverter` for the `List<int>` property that ignores empty strings and null values. Here's an example implementation:

```
public class IntListConverter : JsonConverter<List<int>>
{
    public override List<int> ReadJson(JsonReader reader, Type objectType, List<int> existingValue, bool hasExistingValue, JsonSerializer serializer)
    {
        var list = existingValue ?? new List<int>();
        if (reader.TokenType == JsonToken.StartArray)
        {
            while (reader.Read())
            {
                if (reader.TokenType == JsonToken.EndArray)
                {
                    return list;
                }
                else if (reader.TokenType == JsonToken.Null || reader.Value == null)
                {
                    continue;
                }
                else if (reader.TokenType == JsonToken.String && string.IsNullOrEmpty((string)reader.Value))
                {
                    continue;
                }
                else
                {
                    list.Add(Convert.ToInt32(reader.Value));
                }
            }
        }
        return list;
    }

    public override void WriteJson(JsonWriter writer, List<int> value, JsonSerializer serializer)
    {
        throw new NotImplementedException();
    }
}
```

Then, you can apply this converter to your `Edges` property like this:

```
public class Redacted
{
    ...

    [JsonProperty("edges", ItemConverterType = typeof(IntListConverter), NullValueHandling = NullValueHandling.Ignore)]
    public List<int> Edges { get; set; } = new();

    ...
}
```

This will ignore empty strings and null values in the `"edges"` array and deserialize it to a `List<int>`.