Yes, you can take advantage of Docker's layer caching with Go modules. Here's how you can do it:

1. Copy your `go.mod` and `go.sum` files into your Docker image.
2. Run `go mod download`. This will download all the dependencies specified in your `go.mod` and `go.sum` files.
3. Copy the rest of your source code into the Docker image.
4. Build your application.

Here's a Dockerfile that demonstrates this:

```Dockerfile
FROM golang:1.11

WORKDIR /app

# Copy go mod and sum files 
COPY go.mod go.sum ./

# Download all dependencies. Dependencies will be cached if the go.mod and go.sum files are not changed 
RUN go mod download

# Copy the source from the current directory to the Working Directory inside the docker container 
COPY . .

# Build the Go app
RUN CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o main .

CMD ["./main"]
```

This Dockerfile will take advantage of Docker's layer caching. The `go mod download` step will be cached unless your `go.mod` or `go.sum` files change. This can significantly speed up your Docker builds if your dependencies don't change often.