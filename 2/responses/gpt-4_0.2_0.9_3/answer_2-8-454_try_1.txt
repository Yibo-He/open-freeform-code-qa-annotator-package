The best practice for Go projects is to have a single `go.mod` file at the root of your project. This means that all packages in your project are part of the same module. This is the most common approach and it simplifies dependency management.

Your directory structure would look like this:

```
project
├── go.mod
├── main.go
└── players
    ├── players.go
    └── players_test.go
```

And you would import the `players` package in your `main.go` file like this:

```go
import "github.com/<name>/<project>/players"
```

The approach you mentioned with multiple `go.mod` files and the `replace` directive in the root `go.mod` file is not recommended for most use cases. It's more complex and it can lead to problems with dependency management. It's mainly intended for developing and testing local replacements for remote modules.

The approach of making every module its own repository is also not recommended for most use cases. It can make sense if you have modules that are independently versioned and maintained, but for a typical project it's overkill and it can make the project harder to manage.

So in summary, the best practice is to have a single `go.mod` file at the root of your project and to structure your project as a single module with multiple packages.