In Java, the PriorityQueue class does not directly support a priority queue of pairs. The priority is determined by natural ordering (for Comparable elements) or by a Comparator provided at queue construction time (for elements that are not Comparable).

In your case, you are trying to use a `Pair<Integer, Integer>` in a `PriorityQueue`, but the `Pair` class does not implement `Comparable`. Therefore, you need to provide a `Comparator` to the `PriorityQueue` to tell it how to order the pairs.

Here's how you can modify your code to achieve this:

```java
import javafx.util.Pair;
import java.util.PriorityQueue;
import java.util.Comparator;

public class Test
{
    public static void main (String[] args)
    {
        int n = 5;

        PriorityQueue<Pair<Integer,Integer>> l = new PriorityQueue<>(n, new Comparator<Pair<Integer, Integer>>() {
            @Override
            public int compare(Pair<Integer, Integer> o1, Pair<Integer, Integer> o2) {
                return o1.getKey().compareTo(o2.getKey());
            }
        });

        l.add(new Pair<>(1, 90));
        l.add(new Pair<>(7, 54));
        l.add(new Pair<>(2, 99));
        l.add(new Pair<>(4, 88));
        l.add(new Pair<>(9, 89));

        System.out.println(l.poll().getValue()); 
    }
}
```

In this code, we're creating a new `Comparator` that compares pairs based on their keys. This will ensure that the pair with the smallest key is always at the head of the queue. When you call `l.poll().getValue()`, it will return the value associated with the smallest key.