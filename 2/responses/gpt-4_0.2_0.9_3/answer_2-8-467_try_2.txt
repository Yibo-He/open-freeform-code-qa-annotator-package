The issue is that you're using backticks (`) instead of double quotes (") for the struct tags. In Go, struct tags should be written in double quotes. 

Here is the corrected struct:

```go
type User struct {
    Name string `json:"name"`
    Age  int64  `json:"age"`
}
```

And you need to change the way you're accessing these tags in your `JSONEncode` function. You should use `Tag.Get` method to get the tag value:

```go
tag := structFieldRefObjTyp.Tag.Get("json")
```

So, the corrected `JSONEncode` function would be:

```go
func JSONEncode(v interface{}) ([]byte, error) {
    refObjVal := reflect.ValueOf(v)
    refObjTyp := reflect.TypeOf(v)
    buf := bytes.Buffer{}
    if refObjVal.Kind() != reflect.Struct {
        return buf.Bytes(), fmt.Errorf(
            "val of kind %s is not supported",
            refObjVal.Kind(),
        )
    }
    buf.WriteString("{")
    pairs := []string{}
    for i := 0; i < refObjVal.NumField(); i++ {
        structFieldRefObj := refObjVal.Field(i)
        structFieldRefObjTyp := refObjTyp.Field(i)
        tag := structFieldRefObjTyp.Tag.Get("json")

        switch structFieldRefObj.Kind() {
        case reflect.String:
            strVal := structFieldRefObj.Interface().(string)
            pairs = append(pairs, `"`+tag+`":"`+strVal+`"`)
        case reflect.Int64:
            intVal := structFieldRefObj.Interface().(int64)
            pairs = append(pairs, `"`+tag+`":`+strconv.FormatInt(intVal, 10))
        default:
            return buf.Bytes(), fmt.Errorf(
                "struct field with name %s and kind %s is not supprted",
                structFieldRefObjTyp.Name,
                structFieldRefObj.Kind(),
            )
        }
    }

    buf.WriteString(strings.Join(pairs, ","))
    buf.WriteString("}")

    return buf.Bytes(), nil
}
```

This should resolve the issues you're seeing in VS Code.