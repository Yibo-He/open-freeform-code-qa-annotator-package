It seems like you want to handle session expiration gracefully in your application. Here's a general step-by-step guide on how you can achieve this:

1. **Detect Session Expiration**: The first step is to detect when the session has expired. This can be done by setting a timeout when the session is created, and then checking the current time against this timeout whenever a request is made.

2. **Handle Session Expiration**: Once you've detected that the session has expired, you need to handle this in your code. This could be done in a number of ways, depending on your application. For example, you could redirect the user to a login page, or you could display a message informing them that their session has expired.

3. **Logout Functionality**: When the user clicks the logout button, you should invalidate the session on the server side. This means that even if the session has already expired, clicking logout will still work as expected.

4. **Error Handling**: To prevent the error message from being displayed, you need to handle this in your code. This could be done by catching the exception that is thrown when the session has expired, and then handling it appropriately.

5. **Testing**: Finally, you should test your code to ensure that it works as expected. This could involve creating a session, waiting for it to expire, and then trying to logout.

Remember, the exact implementation of these steps will depend on the programming language and framework that you're using.