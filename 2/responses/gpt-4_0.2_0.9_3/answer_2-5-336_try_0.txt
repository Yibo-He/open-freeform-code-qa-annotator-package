In Java, the PriorityQueue class does not provide a direct way to compare Pair objects. You need to provide a Comparator to the PriorityQueue to tell it how to compare the Pair objects. 

Here is how you can modify your code:

```java
import javafx.util.Pair;
import java.util.PriorityQueue;
import java.util.Comparator;

public class Test
{
    public static void main (String[] args)
    {
        int n = 5;

        PriorityQueue <Pair <Integer,Integer> > l = new PriorityQueue <Pair <Integer,Integer> > (n, new Comparator<Pair<Integer, Integer>>() {
            @Override
            public int compare(Pair<Integer, Integer> o1, Pair<Integer, Integer> o2) {
                return o1.getKey().compareTo(o2.getKey());
            }
        });

        l.add(new Pair <> (1, 90));
        l.add(new Pair <> (7, 54));
        l.add(new Pair <> (2, 99));
        l.add(new Pair <> (4, 88));
        l.add(new Pair <> (9, 89));

        System.out.println(l.poll().getValue()); 
    }
}
```

In this code, we are creating a new Comparator that compares the keys of the Pair objects. The PriorityQueue will use this Comparator to order the elements in the queue. When you call poll(), it will return the Pair with the smallest key, and then you can call getValue() to get the value of that Pair.