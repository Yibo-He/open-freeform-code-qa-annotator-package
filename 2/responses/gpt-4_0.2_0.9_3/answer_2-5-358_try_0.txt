It seems like you're looking for a more elegant way to perform background tasks and update the UI thread in Android using Java. Here are a few suggestions:

1. **Use a `Handler` with a `Looper`:** You've mentioned `Handler` and `Looper`, but it seems like you're not using them to their full potential. You can create a `Handler` object in your UI thread, and then use this `Handler` to post `Runnable` objects from your background thread. This `Runnable` will then be executed on the UI thread.

```java
Handler mainHandler = new Handler(Looper.getMainLooper());

mainHandler.post(new Runnable() {
    @Override
    public void run() {
        // Update UI
    }
});
```

2. **Use `AsyncTask` with WeakReferences:** If you're worried about memory leaks or exceptions when the user navigates away from an Activity or Fragment, you can use `WeakReference` in your `AsyncTask`. This allows the `AsyncTask` to be garbage collected if the Activity or Fragment is destroyed.

```java
private static class MyAsyncTask extends AsyncTask<Void, Void, String> {
    private WeakReference<TextView> weakTextView;

    MyAsyncTask(TextView textView) {
        weakTextView = new WeakReference<>(textView);
    }

    @Override
    protected String doInBackground(Void... params) {
        // Do background work
        return "Result";
    }

    @Override
    protected void onPostExecute(String result) {
        TextView textView = weakTextView.get();
        if (textView != null) {
            textView.setText(result);
        }
    }
}
```

3. **Use `RxJava`:** `RxJava` is a powerful library for composing asynchronous and event-based programs using observable sequences. It can be used to handle background tasks and update the UI thread in a clean and efficient way. However, it has a steep learning curve and might be overkill for simple tasks.

```java
Observable.fromCallable(() -> {
    // Do background work
    return "Result";
})
.subscribeOn(Schedulers.io())
.observeOn(AndroidSchedulers.mainThread())
.subscribe(result -> {
    // Update UI
});
```

Remember, the key to updating the UI from a background thread in Android is to make sure that the UI update is performed on the main thread. The methods above all ensure this in different ways. Choose the one that best fits your needs and the complexity of your project.