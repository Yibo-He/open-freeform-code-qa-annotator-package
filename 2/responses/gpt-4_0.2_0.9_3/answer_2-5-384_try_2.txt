You can use `@TestPropertySource` annotation to specify locations of properties files that should be loaded for your test. This annotation can be used as a class-level annotation on your test class.

Here is how you can do it:

```java
@RunWith(SpringRunner.class)
@SpringBootTest(classes = SomeProperties.class)
@ActiveProfiles("test")
@EnableConfigurationProperties
@TestPropertySource(locations="classpath:application-test.properties")
public class SomeServiceTest {
    @InjectMocks
    private SomeService someService;

    @Autowired
    private SomeProperties someProperties;
```

In this case, you don't need to mock `SomeProperties` because it will be populated with the properties from `application-test.properties` file.

If you still want to mock `SomeProperties`, you can do it like this:

```java
@RunWith(SpringRunner.class)
@SpringBootTest(classes = SomeProperties.class)
@ActiveProfiles("test")
@EnableConfigurationProperties
public class SomeServiceTest {
    @InjectMocks
    private SomeService someService;

    @MockBean
    private SomeProperties someProperties;

    @Before
    public void setup() {
        Mockito.when(someProperties.getProperty1()).thenReturn("mocked value 1");
        Mockito.when(someProperties.getProperty2()).thenReturn("mocked value 2");
    }
```

In this case, `SomeProperties` will be a mock and its methods will return the values specified in the `setup` method. Note that `@MockBean` is used instead of `@Mock` because `@MockBean` is a Spring-specific annotation that integrates with Spring's dependency injection.