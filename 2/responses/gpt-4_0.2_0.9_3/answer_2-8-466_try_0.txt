The `promhttp` package provides HTTP handlers to expose Prometheus metrics. If you want to use the `gin` framework, you can use the `gin.WrapH` function to wrap the `promhttp` handler into a `gin` handler.

Here is how you can modify your code:

```go
package main

import (
    "log"
    "github.com/gin-gonic/gin"
    "github.com/prometheus/client_golang/prometheus"
    "github.com/prometheus/client_golang/prometheus/promhttp"
)

var cpuTemp = prometheus.NewGauge(prometheus.GaugeOpts{
        Name: "cpu_temperature_celsius",
        Help: "Current temperature of the CPU.",
    })

func init() {
    // Metrics have to be registered to be exposed:
    prometheus.MustRegister(cpuTemp)
}

func main() {
    cpuTemp.Set(65.3)

    // Create a gin router
    r := gin.Default()

    // Use gin.WrapH to wrap the promhttp handler into a gin handler.
    r.GET("/metrics", gin.WrapH(promhttp.Handler()))

    // Start the server
    log.Fatal(r.Run(":8080"))
}
```

In this code, `gin.WrapH(promhttp.Handler())` wraps the `promhttp` handler into a `gin` handler, which can be used with the `gin` router. The `r.Run(":8080")` starts the server on port 8080.