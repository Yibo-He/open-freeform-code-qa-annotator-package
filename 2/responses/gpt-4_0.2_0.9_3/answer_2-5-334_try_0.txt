The @Configuration annotation in Spring is used for defining Spring Beans and the dependency injection. Here are some benefits of using @Configuration:

1. **Centralized Configuration**: @Configuration allows you to have all your configuration in one place and have a modular, manageable code.

2. **Advanced Dependency Injection**: With @Configuration, you can define beans in a method and use @Bean annotation. This gives you the ability to control the instantiation and configuration of your beans in a programmatic way. You can also control the scope of the beans (singleton, prototype, etc).

3. **Conditional Bean Creation**: With @Configuration, you can use @Conditional annotation to control whether a bean should be created based on certain conditions.

4. **Externalized Configuration**: @Configuration classes support @PropertySource which can be used to externalize your configuration to a property file.

5. **Importing Other Configuration**: @Configuration classes support @Import annotation which allows for loading @Bean definitions from another configuration class.

On the other hand, @Service, @Controller, @Repository, and @Component are stereotypes annotations. They are used for auto-detection and auto-configuration of beans. When you annotate a class with these annotations, Spring automatically detects them for classpath scanning.

The main difference between them is that @Configuration is used to define Spring Beans and the dependency injection, while @Service, @Controller, @Repository, and @Component are used to automatically detect and configure beans using classpath scanning.

You can use @Value in any Spring managed bean. It's not limited to @Configuration classes. It's used to inject values from property files into your beans.

In conclusion, you would use @Configuration when you want more control over the bean instantiation and configuration process. If you just want to declare a bean and let Spring handle everything else, you can use @Service, @Controller, @Repository, or @Component.