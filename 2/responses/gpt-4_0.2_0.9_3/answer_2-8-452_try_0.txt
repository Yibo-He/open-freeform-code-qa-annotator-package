In Go, you can use a data structure called a "slice" which is similar to an array but it can grow and shrink in size. Slices are more common in Go than traditional arrays.

Here's how you can declare a slice and append elements to it:

```go
package main

import "fmt"

func main() {
    // Declare a slice of integers
    var s []int

    // Append elements to the slice
    s = append(s, 1)
    s = append(s, 2, 3, 4)

    fmt.Println(s) // Output: [1 2 3 4]
}
```

In the above example, we first declare a slice `s` of integers. We then append elements to the slice using the `append` function. The `append` function takes a slice and one or more elements to be added to the slice, and returns a new slice which includes the original elements plus the new ones.

Note that slices in Go are dynamic, meaning they can grow and shrink in size as needed. This is different from arrays, which have a fixed size.