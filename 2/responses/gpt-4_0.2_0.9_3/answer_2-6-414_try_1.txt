The issue you're facing is due to the fact that the JSON array contains empty strings, which cannot be deserialized into integers. The `NullValueHandling.Ignore` option only works for null values, not empty strings.

One way to handle this is to change your `Edges` property to a list of nullable integers (`List<int?>`). This way, the deserialization process can handle null values. However, this will not solve the problem with empty strings.

Here's how you can modify your class:

```csharp
public class Redacted
{
    ...

    [JsonProperty("edges")]
    public List<int?> Edges { get; set; } = new();

    ...
}
```

Another way is to use a custom `JsonConverter` to handle the deserialization process. This allows you to control how the JSON is deserialized into your `Edges` property. Here's an example of how you can implement this:

```csharp
public class Redacted
{
    ...

    [JsonProperty("edges")]
    [JsonConverter(typeof(EdgesConverter))]
    public List<int> Edges { get; set; } = new();

    ...
}

public class EdgesConverter : JsonConverter
{
    public override bool CanConvert(Type objectType)
    {
        return objectType == typeof(List<int>);
    }

    public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
    {
        var token = JToken.Load(reader);
        if (token.Type == JTokenType.Array)
        {
            return token.Children()
                        .Where(t => t.Type == JTokenType.Integer)
                        .Select(t => (int)t)
                        .ToList();
        }
        return null;
    }

    public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
    {
        throw new NotImplementedException();
    }
}
```

In this example, the `EdgesConverter` only considers JSON tokens of type `Integer` when deserializing the `edges` property. This means that null values and empty strings are ignored.